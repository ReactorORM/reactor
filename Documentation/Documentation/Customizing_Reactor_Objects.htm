<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Customizing Reactor Objects</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2880>
<meta name=layout-width content=1153>


<!--(Links)=========================================================-->

<link rel=StyleSheet href=default.css>



</head>

<!--(Body)==========================================================-->


<body>

<h1>Customizing Reactor Objects</h1>

<p>We've seen a lot of Reactors functionality now. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->But 
 what if Reactor doesn't DO what you want? <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 instance, let's say that you need a method on the Customer object which 
 you can call to see how much the customer has spent in your store across 
 all of their purchases.</p>

<p>&nbsp;</p>

<p>It's easy enough to say that a customer has many invoices. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->I've 
 updated my customer configuration like this:</p>

<p>&nbsp;</p>

<p class=code>&lt;object name=&quot;Customer&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;hasOne 
 name=&quot;Address&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;relate 
 from=&quot;addressId&quot; to=&quot;addressId&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;/hasOne&gt; 
 <br>
<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;hasMany 
 name=&quot;Invoice&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;relate 
 from=&quot;customerId&quot; to=&quot;customerId&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;/hasMany&gt; 
 <br>
&lt;/object&gt;</p>

&nbsp; 

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->So, 
 logically, we could program something to get all of the customer’s InvoiceRecords, 
 and then all the ProductRecords on those invoices and we could total them 
 up - all in some sort of hari-kari query. 

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->&nbsp; 
 

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->Of 
 course, it’d make more sense to just write a simple query. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Something 
 like this would do the trick just fine: 

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->&nbsp; 
 

<p class=code>SELECT sum(p.price) as totalSpent<br>
FROM Customer as c JOIN Invoice as i<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->ON c.customerId 
 = i.invoiceID<br>
JOIN InvoiceProduct as ip<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->ON i.invoiceId 
 = ip.invoiceId<br>
JOIN Product as p<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->ON ip.productId 
 = p.productId<br>
WHERE c.customerId = 1</p>

&nbsp; 

<p>This begs a few questions:</p>

<p>&nbsp;</p>

<ol style="list-style: decimal;"
	type=1>
	
	<li class=kadov-p><p>Where would we put this query? <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p></li>
	
	<li class=kadov-p><p>How would we call it?</p></li>
	
	<li class=kadov-p><p>How do we specify the datasource for the cfquery 
 tag?</p></li>
	
	<li class=kadov-p><p>This seems a little low-tech, isn't it Reactor’s 
 purpose to avoid stuff like this?</p></li>
	
	<li class=kadov-p><p>Is there a different way to do this?</p></li>
</ol>

<p>&nbsp;</p>

<p>I'll address these one at a time:</p>

<h2>Where would we put this query?</h2>

<p>If, for whatever reason, we wanted to use this query as it is, we'd 
 want to make it reusable. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 best way to do this is to encapsulate it in a method in a customizable 
 object. </p>

<p>&nbsp;</p>

<p>To do this, open up your DBMS specific customizable Customer Record 
 component. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Because 
 I'm using Microsoft SQL Server mind is named CustomerRecordmssql.cfc. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This file 
 looks like this:</p>

<p>&nbsp;</p>

<p class=code>&lt;cfcomponent hint=&quot;I am the database agnostic custom 
 Record object for the Customer object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->I 
 am generated, but not overwritten if I exist. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 are safe to edit me.&quot; extends=&quot;reactor.project.Scratch.Record.CustomerRecord&quot; 
 &gt;<br>
&lt;!--- Place custom code here, it will not be overwritten ---&gt;<br>
<br>
&lt;/cfcomponent&gt;</p>

<p>&nbsp;</p>

<p class=note>Note: If you don't remember the structure of files generated 
 by Reactor you should check out <a href="The_Reactor_Generated_Files.htm">The 
 Reactor Generated Files</a> section.</p>

<p>&nbsp;</p>

<p>We need to add a method to this CFC to run the query and return the 
 value we're looking for. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->We're 
 putting this method in the DBMS specific CustomerRecord file because the 
 query is DBMS specific. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->(Honestly, 
 this query sure looks cross-DBMS specific, but it's a best practice to 
 put hand written queries in their CFC that represents the database the 
 query will be run against.) <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 CustomerRecord was chose because the context of the returned data is specific 
 to only one customer. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 is a bit of a judgment call. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->It 
 could also go in the customizable CustomerGateway. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>Inside all of the Reactor Generated objects there's a method <span class=function>_getConfig()</span> 
 which will return a reactor.config.config object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 is really just a bean which lets you access the settings in the &quot;config&quot; 
 section of your Reactor.xml file. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>My method looks like this:</p>

<p>&nbsp;</p>

<p class=code>&lt;cffunction name=&quot;getTotalSpent&quot; access=&quot;public&quot; 
 output=&quot;false&quot; returntype=&quot;numeric&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 var total = 0 /&gt;<br>
<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfquery 
 name=&quot;total&quot; datasource=&quot;#_getConfig().getDsn()#&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->SELECT 
 sum(p.price) as totalSpent<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->FROM 
 Customer as c JOIN Invoice as i<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ON 
 c.customerId = i.invoiceID<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->JOIN 
 InvoiceProduct as ip<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ON 
 i.invoiceId = ip.invoiceId<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->JOIN 
 Product as p<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ON 
 ip.productId = p.productId<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->WHERE 
 c.customerId = #getCustomerId()#<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;/cfquery&gt;<br>
<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfreturn 
 Val(total.totalSpent) /&gt;<br>
&lt;/cffunction&gt;</p>

<p>&nbsp;</p>

This method will run the query and return the total amount any given Customer 
 spent (or 0 if the customer hasn't spent anything). 

<h2>How would we call it?</h2>

Calling this method is as simple as calling this method. (Helpful, wasn't 
 that?) <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Here’s 
 an example: 

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->&nbsp; 
 

<p class=code>&lt;!--- create the reactorFactory ---&gt;<br>
&lt;cfset Reactor = CreateObject(&quot;Component&quot;, &quot;reactor.reactorFactory&quot;).init(expandPath(&quot;reactor.xml&quot;)) 
 /&gt;<br>
<br>
&lt;!--- create a customerRecord and load one ---&gt;<br>
&lt;cfset CustomerRecord = Reactor.createRecord(&quot;Customer&quot;) /&gt;<br>
&lt;cfset CustomerRecord.setCustomerId(1) /&gt;<br>
&lt;cfset CustomerRecord.load() /&gt;<br>
<br>
&lt;!--- how much did this customer spend? ---&gt;<br>
&lt;cfoutput&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->#CustomerRecord.getTotalSpent()#<br>
&lt;/cfoutput&gt;</p>

<h2>How do we get the datasource for the cfquery tag?</h2>

<p>This was actually answered already, but I'll answer it again:</p>

<p>&nbsp;</p>

<p>In all Reactor generated objects there's a method <span class=function>_getConfig()</span> 
 which will return a reactor.config.config object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 is really just a bean which let's you access the settings in the &quot;config&quot; 
 section of your Reactor.xml file. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>Our query looked like this:</p>

<p>&nbsp;</p>

<p class=code>&lt;cfquery name=&quot;total&quot; datasource=&quot;#_getConfig().getDsn()#&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->SELECT 
 sum(p.price) as totalSpent<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->FROM 
 Customer as c JOIN Invoice as i<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ON 
 c.customerId = i.invoiceID<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->JOIN 
 InvoiceProduct as ip<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ON 
 i.invoiceId = ip.invoiceId<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->JOIN 
 Product as p<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->ON 
 ip.productId = p.productId<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->WHERE 
 c.customerId = #getCustomerId()#<br>
&lt;/cfquery&gt;</p>

<p>&nbsp;</p>

<p>As you can see, we’re calling <span class=function>getDsn()</span> on 
 the config object returned by the <span class=function>_getConfig()</span> 
 method. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 will return the configured datasource name.</p>

<h2>This seems a little low-tech, isn't it Reactor’s purpose to avoid stuff 
 like this?</h2>

<p>Nope. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->That's 
 not true. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Reactor's 
 job is to automate the tedious and repetitive work involved in creating 
 an object oriented persistence mechanism. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>This example may be tedious, but it's not repetitive. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 won't be adding this same code all over the place. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You'll 
 only add it this one time in this one place.</p>

<p>&nbsp;</p>

<p>In a nutshell, being able to add this type of functionally is part of 
 the real power of Reactor.</p>

<h2>Is there a different way to do this?</h2>

<p>How very perceptive of you. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Why, 
 yes, there is a different way to do this.</p>

<p>&nbsp;</p>

<p>I encourage you to think back to the point where we first created a 
 Gateway object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 may have dumped it out and noted that there was a method on it, <span 
 class=function>createQuery()</span>.</p>

<p>&nbsp;</p>

<p>This method will return a Query object which is the basis of Reactor's 
 Object Oriented Query capabilities.</p>

<p>&nbsp;</p>

<p>Let's take a look under the covers of Object Oriented Queries.</p>

</body>

</html>
