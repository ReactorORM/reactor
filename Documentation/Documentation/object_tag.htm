<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>object tag</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=1665>
<meta name=layout-width content=1300>


<!--(Links)=========================================================-->

<link rel=StyleSheet href=default.css>



</head>

<!--(Body)==========================================================-->


<body>

<h1>&lt;object&gt; tag</h1>

<h4>Description</h4>

<p>The object tag is used to define an object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Attributes 
 on the tag and sets of child tags define details about reactor generated 
 objects. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 example you can use an alias tag on the object to rename an object from 
 something like &quot;tbl_Cust_Markets&quot; to &quot;CustomerMarket&quot;. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You can 
 use the field tag to do the same thing for fields. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 hasOne and hasMany tags are used to define relationships between objects.</p>

<p>&nbsp;</p>

<p>Ultimately the settings defined via the object tag control most of Reactor's 
 functionality.</p>

<p>&nbsp;</p>

<p>The name attribute is used to specify either a table or view in your 
 database.</p>

<p>&nbsp;</p>

<p>To create instances of an object you are not required to specify an 
 object tag. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 you had a table in your database called &quot;tbl_Cust_Markets&quot; you 
 can, without specifying an object tag, instantiate objects based on the 
 table. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 example (assuming the ReactorFactory has already been instantiated):</p>

<p>&nbsp;</p>

<p class=code>&lt;cfset CustomerMarketRecord = ReactorFactory.createRecord(&quot;tbl_Cust_Markets&quot;) 
 /&gt;</p>

<p>&nbsp;</p>

<p>The resulting objects will be written under the <a href="project_tag.htm">project</a> 
 directory and the <a href="mapping_tag.htm">mapping</a> directory with 
 names like &quot;tbl_Cust_MarketsRecord.cfc&quot;. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 may be adequate for your needs, but it's not really elegant. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A 
 better option would be to define the object using an object tag and to 
 give it an alias. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 example:</p>

<p>&nbsp;</p>

<p class=code>&lt;object name=&quot;tbl_Cust_Markets&quot; alias=&quot;CustomerMarket&quot; 
 /&gt;</p>

<p>&nbsp;</p>

<p class=note>Note: The alias is singular because each of a common convention 
 in Reactor. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 example, one record represents one row in the database. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->It 
 doesn't really make sense to have a UsersRecord. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->A 
 UserRecord makes more sense.</p>

&nbsp;

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->Given 
 the configuration above you can now instantiate a CustomerMarket record 
 like this:

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->&nbsp;

<p class=code>&lt;cfset CustomerMarketRecord = ReactorFactory.createRecord(&quot;CustomerMarket&quot;) 
 /&gt;</p>

&nbsp;

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->Not 
 only do you specify the alias in the createRecord method, the alias is 
 used when writing files to disk. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You'll 
 end up with files with names like &quot;CustomerMarketRecord.cfc&quot;.

<!--begin!kadov{{--><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->&nbsp;

<p class=note>Note: Throughout the framework methods which require you 
 to specify objects actually only accept object aliases. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->In 
 the case that you don't provide an object alias Reactor simply sets the 
 alias to the name.</p>

<h4>Attributes</h4>

<!--(Table)=========================================================-->
<table x-use-null-cells
		style="x-cell-content-align: top;
				width: 100%;
				border-spacing: 0px;"
		cellspacing=0
		width=100%>
<col style="width: 33.333%;">
<col style="width: 33.333%;">
<col style="width: 33.333%;">

<tr style="x-cell-content-align: top;"
	valign=top>
<th scope=col
	style="width: 33.333%;
			border-left-width: 1px;
			border-left-color: #000000;
			border-left-style: Solid;
			border-top-style: Solid;
			border-top-color: #000000;
			border-top-width: 1px;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>Attribute</th>
<th scope=col
	style="width: 33.333%;
			border-top-style: Solid;
			border-top-color: #000000;
			border-top-width: 1px;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>Required</th>
<th scope=col
	style="width: 33.333%;
			border-top-style: Solid;
			border-top-color: #000000;
			border-top-width: 1px;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>Description</th></tr>

<tr style="x-cell-content-align: top;"
	valign=top>
<td style="width: 33.333%;
			border-left-width: 1px;
			border-left-color: #000000;
			border-left-style: Solid;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>name</td>
<td style="width: 33.333%;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>Yes</td>
<td style="width: 33.333%;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>This is the name of the object as defined in your database. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 may or may not be case sensitive, depending on your DBMS. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->An 
 object may be a table or a view. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 an alias is not provided then the name attribute will define the name 
 of objects as they are written to disk and as they are </td></tr>

<tr style="x-cell-content-align: top;"
	valign=top>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-left-style: Solid;
			border-left-color: #000000;
			border-left-width: 1px;
			border-right-style: Solid;
			border-right-color: #000000;
			border-right-width: 1px;
			border-bottom-width: 1px;
			border-bottom-color: #000000;
			border-bottom-style: Solid;"
	width=33.333%>
<p>alias</td>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-right-style: Solid;
			border-right-color: #000000;
			border-right-width: 1px;
			border-bottom-width: 1px;
			border-bottom-color: #000000;
			border-bottom-style: Solid;"
	width=33.333%>
<p>No</td>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-right-style: Solid;
			border-right-color: #000000;
			border-right-width: 1px;
			border-bottom-width: 1px;
			border-bottom-color: #000000;
			border-bottom-style: Solid;"
	width=33.333%>
<p>This is an alias by which you will address this object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 alias will be used to name objects on disk and to instantiate instances 
 of reactor generated objects for this object.</p>
<p>&nbsp;</p>
<p style="font-weight: bold;">If this attribute is not provided it is defaulted 
 to the value of the name attribute.</td></tr>
</table>

<h4>Child Tags</h4>

<!--(Table)=========================================================-->
<table x-use-null-cells
		style="x-cell-content-align: top;
				width: 100%;
				border-spacing: 0px;
				border-spacing: 0px;"
		cellspacing=0
		width=100%>
<col style="width: 33.333%;">
<col style="width: 33.333%;">
<col style="width: 33.333%;">

<tr style="x-cell-content-align: top;"
	valign=top>
<th scope=col
	style="width: 33.333%;
			border-left-width: 1px;
			border-left-color: #000000;
			border-left-style: Solid;
			border-top-style: Solid;
			border-top-color: #000000;
			border-top-width: 1px;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>Tag</th>
<th scope=col
	style="width: 33.333%;
			border-top-style: Solid;
			border-top-color: #000000;
			border-top-width: 1px;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>Required</th>
<th scope=col
	style="width: 33.333%;
			border-top-style: Solid;
			border-top-color: #000000;
			border-top-width: 1px;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>Description</th></tr>

<tr style="x-cell-content-align: top;"
	valign=top>
<td style="width: 33.333%;
			border-left-width: 1px;
			border-left-color: #000000;
			border-left-style: Solid;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>field</td>
<td style="width: 33.333%;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>No</td>
<td style="width: 33.333%;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;
			padding-right: 10px;
			padding-left: 10px;"
	width=33.333%>
<p>I define alias for a field and sequences for fields on DBMS that require 
 them.</td></tr>

<tr style="x-cell-content-align: top;"
	valign=top>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-left-style: Solid;
			border-left-color: #000000;
			border-left-width: 1px;
			border-right-style: Solid;
			border-right-color: #000000;
			border-right-width: 1px;
			border-bottom-width: 1px;
			border-bottom-color: #000000;
			border-bottom-style: Solid;"
	width=33.333%>
<p>hasOne</td>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-right-style: Solid;
			border-right-color: #000000;
			border-right-width: 1px;
			border-bottom-width: 1px;
			border-bottom-color: #000000;
			border-bottom-style: Solid;"
	width=33.333%>
<p>No</td>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-right-style: Solid;
			border-right-color: #000000;
			border-right-width: 1px;
			border-bottom-width: 1px;
			border-bottom-color: #000000;
			border-bottom-style: Solid;"
	width=33.333%>
<p>I define a relationship where this object has one of another object. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For example, 
 a user may have one address.</td></tr>

<tr style="x-cell-content-align: top;"
	valign=top>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-left-width: 1px;
			border-left-color: #000000;
			border-left-style: Solid;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;"
	width=33.333%>
<p>hasMany</td>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;"
	width=33.333%>
<p>No</td>
<td colspan=1
	rowspan=1
	style="width: 33.333%;
			padding-right: 10px;
			padding-left: 10px;
			border-right-width: 1px;
			border-right-color: #000000;
			border-right-style: Solid;
			border-bottom-style: Solid;
			border-bottom-color: #000000;
			border-bottom-width: 1px;"
	width=33.333%>
<p>I define a relationship where this object has many of another object. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For example, 
 an address may have many users.</td></tr>
</table>

<h4>Example</h4>

<p class=code>&lt;reactor&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;objects&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;object 
 name=&quot;User&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;hasOne 
 name=&quot;Address&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;relate 
 from=&quot;addressId&quot; to=&quot;addressId&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;/hasOne&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;/objects&gt;<br>
<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;object 
 name=&quot;Address&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;hasMany 
 name=&quot;User&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;relate 
 from=&quot;addressId&quot; to=&quot;addressId&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;/hasMany&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;/objects&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;/objects&gt;<br>
&lt;/reactor&gt;</p>

</body>

</html>
