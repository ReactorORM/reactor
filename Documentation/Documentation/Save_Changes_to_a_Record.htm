<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Save Changes to a Record</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2142>
<meta name=layout-width content=1153>


<!--(Links)=========================================================-->

<link rel=StyleSheet href=default.css>



</head>

<!--(Body)==========================================================-->


<body>

<h1>Save Changes to a Record</h1>

<p>Saving changes to a Record is extremely simple. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 instance, let's say I wanted to change the password on this record. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->I 
 could simply call the <span class=function>setPassword()</span> method 
 and pass in the new password like this:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- let's change the password ---&gt;<br>
&lt;cfset UserRecord.setPassword(&quot;Foobar123&quot;) /&gt;</p>

<p>&nbsp;</p>

<p>If you were to call <span class=function>getPassword()</span> you would 
 see that the object now reports the password as being &quot;Foobar123&quot;. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->However, 
 if you look in the database you'll see that it hasn't yet been updated. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Committing 
 this change to the database is as simple as this:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- time to save the update ---&gt;<br>
&lt;cfset UserRecord.save() /&gt;</p>

<p>&nbsp;</p>

<p>Now, if you look in the database, you'll see that the password field 
 has been updated!</p>

<p>&nbsp;</p>

<p>Creating records works the same way as updating them. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Let's 
 review another quick example to demonstrate this. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->We'll 
 pull a few things together:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- create the reactorFactory ---&gt;<br>
&lt;cfset Reactor = CreateObject(&quot;Component&quot;, &quot;reactor.reactorFactory&quot;).init(expandPath(&quot;reactor.xml&quot;)) 
 /&gt;<br>
<br>
&lt;!--- create a userRecord ---&gt;<br>
&lt;cfset UserRecord = Reactor.createRecord(&quot;User&quot;) /&gt;<br>
<br>
&lt;!--- populate the new record ---&gt;<br>
&lt;cfset UserRecord.setUsername(&quot;jschmoe&quot;) /&gt;<br>
&lt;cfset UserRecord.setPassword(&quot;foobar&quot;) /&gt;<br>
&lt;cfset UserRecord.setFirstName(&quot;Joe&quot;) /&gt;<br>
&lt;cfset UserRecord.setLastName(&quot;Schmoe&quot;) /&gt;<br>
<br>
&lt;!--- save the record ---&gt;<br>
&lt;cfset UserRecord.save() /&gt;<br>
<br>
&lt;!--- now, let's list all the records in the database ---&gt;<br>
&lt;cfset UserGateway = Reactor.createGateway(&quot;User&quot;) /&gt;<br>
<br>
&lt;!--- dump all of the users ---&gt;<br>
&lt;cfdump var=&quot;#UserGateway.getAll()#&quot; /&gt;</p>

<p>&nbsp;</p>

<p>The result of running this code would be:</p>

<p>&nbsp;</p>

<p>We now have two rows in our database, just as we would have expected.</p>

<p>&nbsp;</p>

<p>Let's stop here for a second. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->I 
 know that this example works for MSSQL. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->However 
 MySQL users probably received an error message indicating that the dateCreated 
 value was not a valid date. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Why? 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Well, not 
 all database systems let you specify an expression as a default value 
 for a column. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->MSSQL 
 does, MySQL doesn't. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Reactor 
 is smart enough to translate a default value of <span class=function>getDate()</span> 
 to a default value of <span class=function>now()</span> in the Record. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Because 
 MySQL doesn't support this, the column doesn't have a default value and 
 Reactor treats it as an empty string. </p>

<p>&nbsp;</p>

<p>There are two solutions to this. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 quickest and easiest is to simply add a call to <span class=function>setDateCreated()</span> 
 and pass in a call to the ColdFusion <span class=function>now()</span> 
 function. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 works fine, but requires that you remember to do it everywhere. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->What 
 if you could do this one time and never have to worry about it again? 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You can! 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->But first, 
 a Reactor anatomy lesson…</p>

<p>&nbsp;</p>

<p>Record Objects don't hold their own data. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->(That 
 would be too simple!) <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Record 
 Objects use Transfer Objects to hold their data. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Essentially 
 Transfer Objects are a little smarter than a structure and significantly 
 dumber than a Bean.</p>

<p>&nbsp;</p>

<p>If you look in your data directory you'll note that there are now five 
 folders. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->One 
 of these is &quot;To,&quot; which is short for Transfer Object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 you open the database agnostic UserTo.cfc object you will see this code:</p>

<p>&nbsp;</p>

<p class=code>&lt;cfcomponent hint=&quot;I am the database agnostic custom 
 TO object for the User object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->I 
 am generated, but not overwritten if I exist. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 are safe to edit me.&quot;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->extends=&quot;reactor.project.Scratch.To.UserTo&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;!--- 
 Place custom code here, it will not be overwritten ---&gt;<br>
&lt;/cfcomponent&gt;</p>

<p>&nbsp;</p>

<p>This looks quite a bit like the customizable UserGateway.cfc, doesn't 
 it? <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 may also note that this object extends a project UserTo. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Let's 
 look at that too:</p>

<p>&nbsp;</p>

<p class=code>&lt;cfcomponent hint=&quot;I am the base TO object for the 
 User object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->I 
 am generated. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->DO 
 NOT EDIT ME (but feel free to delete me).&quot;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->extends=&quot;reactor.base.abstractTo&quot; 
 &gt;<br>
<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfproperty 
 name=&quot;userId&quot; type=&quot;numeric&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfproperty 
 name=&quot;username&quot; type=&quot;string&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfproperty 
 name=&quot;password&quot; type=&quot;string&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfproperty 
 name=&quot;firstname&quot; type=&quot;string&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfproperty 
 name=&quot;lastname&quot; type=&quot;string&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfproperty 
 name=&quot;dateCreated&quot; type=&quot;date&quot; /&gt;<br>
<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 variables.signature = &quot;D4D176D79148DF927D91FABA697888EB&quot; /&gt;<br>
<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 this.userId = &quot;0&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 this.username = &quot;&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 this.password = &quot;&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 this.firstname = &quot;&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 this.lastname = &quot;&quot; /&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 this.dateCreated = &quot;#Now()#&quot; /&gt;<br>
&lt;/cfcomponent&gt;</p>

<p>&nbsp;</p>

<p>I've reformatted the code to fit better in this document, but it's the 
 same code. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 will note that my DateCreated value is being set to <span class=function>Now()</span>. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->MySQL (and 
 some others) users will see this set to an empty string. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->That's 
 the problem. </p>

<p><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=Quiz><span style="font-weight: bold;">Pop Quiz:</span> How do 
 you set the User TO's DateCreated value to default to Now()?<br>
<br>
I'll give you a minute to think about it…<br>
<br>
… ok, now that that's done, I'm sure you gave this as your answer:<br>
<br>
Override the default value in the customizable UserTo!<br>
<br>
You're right! <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->That's 
 exactly what you should do.</p>

<p>&nbsp;</p>

<p>Here's what a customized UserTo.cfc would look like for MySQL. This 
 example defaults the DateCreated value to now().</p>

<p>&nbsp;</p>

<p class=code>&lt;cfcomponent hint=&quot;I am the database agnostic custom 
 TO object for the User object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->I 
 am generated, but not overwritten if I exist. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 are safe to edit me.&quot;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->extends=&quot;reactor.project.Scratch.To.UserTo&quot;&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;!--- 
 Place custom code here, it will not be overwritten ---&gt;<br>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->&lt;cfset 
 this.DateCreated = now() /&gt;<br>
&lt;/cfcomponent&gt;</p>

<p>&nbsp;</p>

<p>Well done! <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->MySQL 
 users (and others) rerun your code and you'll see that you can easily 
 add a record to the database. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>The only thing left to demonstrate is how to…</p>

</body>

</html>
