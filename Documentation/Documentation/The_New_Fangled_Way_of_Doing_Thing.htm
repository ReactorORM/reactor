<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>The New Fangled Way of Doing Thing</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=953>
<meta name=layout-width content=1153>


<!--(Links)=========================================================-->

<link rel=StyleSheet href=default.css>



</head>

<!--(Body)==========================================================-->


<body>

<h1>The New Fangled Way of Doing Thing</h1>

<p>Over the past few years there has been a move within the ColdFusion 
 community towards structured and/or object oriented approaches to application 
 development. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Using 
 modern techniques you can separate your applications into “tiers”. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 instance, you might create a set of components which are responsible for 
 your application’s database access, another set for the application’s 
 business logic and yet another to display output.</p>

<p>&nbsp;</p>

<p>These techniques have given birth to multiple frameworks which aid development. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Examples 
 of these for ColdFusion are <a href="http://www.Model-Glue.com">Model-Glue</a>, 
 <a href="http://www.mach-ii.com/">Mach-II</a> and <a href="http://www.fusebox.org/">Fusebox</a>.</p>

<p>&nbsp;</p>

<p>However, as the industry moves towards an object oriented approach to 
 database access; many developers find that simply moving queries into 
 components does not provide the flexibility and power they expected. </p>

<p>&nbsp;</p>

<p>For this reason several design patterns have evolved which can help 
 programmers find consistent and flexible solutions to these problems. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->These design 
 patterns include:</p>

<p>&nbsp;</p>

<p><span style="font-weight: bold;">Data Access Objects</span> – Data Access 
 Objects (commonly called DAOs) are objects which provide methods for creating, 
 reading, updating and deleting a single record in a database. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->These 
 are generically known as “CRUD” methods.</p>

<p>&nbsp;</p>

<p><span style="font-weight: bold;">Table Data Gateways</span> – Table 
 Data Gateway objects (commonly known as Gateway Objects) are used to interact 
 with multiple rows in a database. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Most 
 methods in these objects return record sets (queries) and perform select 
 statements.</p>

<p>&nbsp;</p>

<p><span style="font-weight: bold;">Active Records</span> – The Active 
 Record design pattern is new to many developers but has become familiar 
 due to well recognized and respected implementations including the Ruby 
 on Rails framework. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->There 
 are many flavors of this design pattern. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Most 
 implementations are of one object which represents one row in a database. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The object 
 has assessors and mutators (methods for getting and setting values) as 
 well as methods for reading a record, saving it, and deleting it. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->There 
 are also frequently methods for accessing related objects in the database.</p>

<p>&nbsp;</p>

<p>Frequently, other common types of objects are also used which serve 
 the purposes of moving data around, validating data and more. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

</body>

</html>
