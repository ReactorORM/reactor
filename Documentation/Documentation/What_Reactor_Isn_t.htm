<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>What Reactor Isn't</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=1036>
<meta name=layout-width content=1004>


<!--(Links)=========================================================-->

<link rel=StyleSheet href=default.css>



</head>

<!--(Body)==========================================================-->


<body>

<h1>What Reactor Isn't</h1>

<p>Reactor is a powerful tool which helps accelerate development. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->However, 
 it is not a panacea. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->It 
 can not be (and will never be) everything you want it to be. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Here 
 are some things that Reactor is not:</p>

<h2>Reactor is Not Ruby (or ColdFusion) on Rails</h2>

<p>The Ruby on Rails framework has garnered a lot of interest in recent 
 history, especially in the ColdFusion community. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Rails 
 is a framework used to rapidly build applications in the Ruby language.</p>

<p>&nbsp;</p>

<p>There are two major components to the Ruby on Rails framework that most 
 people are familiar with:</p>

<h3>Code Generation</h3>

<p>In particular, Ruby on Rails is famous for the Active Record design 
 pattern. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Like 
 Ruby on Rails, Reactor is a code generator. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->However, 
 the processes used by Ruby and the actual generated code are quite different 
 from what Reactor generates. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>For example, Ruby on Rails, which is an MVC framework, generates a whole 
 set of controllers for your application. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Reactor 
 is agnostic to your application’s overall architecture. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 can use Reactor with your own framework, Model-Glue, Mach-II, Fusebox 
 or even without any framework at all.</p>

<h3>Scaffolding</h3>

<p>One of the most widely touted features of Ruby on Rails is its ability 
 to generate “scaffolding” for your applications. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Scaffolding 
 creates simple pages which allow you to create, read, update and delete 
 your database objects. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->The 
 scaffolding is customized by the developer.</p>

<p>&nbsp;</p>

<p>Reactor does not do any sort of user interface generation and it never 
 will. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->It’s 
 possible that someone could choose their favorite ColdFusion framework 
 (such as Model-Glue) and create a scaffolding program which implements 
 Reactor and that framework. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->However, 
 that’s beyond the scope of Reactor.</p>

<p>&nbsp;</p>

<p class=note>Note: The 2.0 version of Model-Glue uses Reactor and ColdSpring 
 to bring scaffolding to ColdFusion.</p>

<p>&nbsp;</p>

<p>One Other Difference</p>

<p>&nbsp;</p>

<p>Lastly, the Rails framework relies heavily on convention and shuns XML 
 configuration files. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Reactor 
 (arguably) doesn't rely on convention and uses a simple XML configuration 
 file to define relationships between database objects.</p>

<p>&nbsp;</p>

<p>Reactor was, in fact, inspired by a lot of the hubbub around Ruby on 
 Rails. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->However, 
 this does not mean that Reactor has all of the functionality or Ruby on 
 Rails – nor does it try to.</p>

<h3>Reactor is Not a Panacea</h3>

<p>Reactor will not walk your dog. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Reactor 
 will not clean your bathroom. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Reactor 
 does not slice and dice nor make Julian fries. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>Reactor does not do everything you need it to. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->It 
 can’<!--kadov_tag{{<ignored>}}-->t<!--kadov_tag{{</ignored>}}-->. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->(How 
 could it?) <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>When you’re working with Reactor you’re going to have to customize some 
 objects to get them to do what you want. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Reactor 
 tries to make this as easy as possible.</p>

<p>&nbsp;</p>

<p>Keep in mind that the purpose of Reactor is to reduce the amount of 
 tedious, repetitive and error-prone work you’d have to do by hand otherwise. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->It allows 
 you to focus on what makes your application unique.</p>

</body>

</html>
