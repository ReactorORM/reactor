<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>hasOne tag</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="default_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='default.css'>");}
//-->
</script>
<style type="text/css">
<!--
p.whs1 { x-text-underline:normal; text-decoration:underline; }
table.whs2 { width:100%; border-spacing:0px; }
th.whs3 { padding-left:3px; padding-top:3px; padding-right:3px; padding-bottom:3px; border-bottom-color:#000000; border-bottom-width:1px; border-bottom-style:Solid; border-right-color:#000000; border-right-width:1px; border-right-style:Solid; border-left-color:#000000; border-left-width:1px; border-left-style:Solid; border-top-color:#000000; border-top-width:1px; border-top-style:Solid; }
th.whs4 { padding-left:3px; padding-top:3px; padding-right:3px; padding-bottom:3px; border-bottom-color:#000000; border-bottom-width:1px; border-bottom-style:Solid; border-right-color:#000000; border-right-width:1px; border-right-style:Solid; border-top-color:#000000; border-top-width:1px; border-top-style:Solid; }
th.whs5 { padding-left:3px; padding-top:3px; padding-right:3px; padding-bottom:3px; border-bottom-color:#000000; border-bottom-width:1px; border-bottom-style:Solid; border-top-color:#000000; border-top-width:1px; border-top-style:Solid; border-right-color:#000000; border-right-width:1px; border-right-style:Solid; }
td.whs6 { padding-left:3px; padding-top:3px; padding-right:3px; padding-bottom:3px; border-bottom-color:#000000; border-bottom-width:1px; border-bottom-style:Solid; border-right-color:#000000; border-right-width:1px; border-right-style:Solid; border-left-color:#000000; border-left-width:1px; border-left-style:Solid; }
td.whs7 { padding-left:3px; padding-top:3px; padding-right:3px; padding-bottom:3px; border-bottom-color:#000000; border-bottom-width:1px; border-bottom-style:Solid; border-right-color:#000000; border-right-width:1px; border-right-style:Solid; }
td.whs8 { padding-left:3px; padding-top:3px; padding-right:3px; padding-bottom:3px; border-right-color:#000000; border-right-width:1px; border-right-style:Solid; border-left-color:#000000; border-left-width:1px; border-left-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; border-bottom-style:Solid; }
td.whs9 { padding-left:3px; padding-top:3px; padding-right:3px; padding-bottom:3px; border-right-color:#000000; border-right-width:1px; border-right-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; border-bottom-style:Solid; }
ul.whs10 { list-style:disc; }
table.whs11 { x-cell-content-align:top; width:100%; border-spacing:0px; }
col.whs12 { width:33.333%; }
tr.whs13 { x-cell-content-align:top; }
th.whs14 { width:33.333%; border-left-width:1px; border-left-color:#000000; border-left-style:solid; border-top-style:solid; border-top-color:#000000; border-top-width:1px; border-right-width:1px; border-right-color:#000000; border-right-style:solid; border-bottom-style:solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
th.whs15 { width:33.333%; border-top-style:solid; border-top-color:#000000; border-top-width:1px; border-right-width:1px; border-right-color:#000000; border-right-style:solid; border-bottom-style:solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
td.whs16 { width:33.333%; border-left-width:1px; border-left-color:#000000; border-left-style:solid; border-right-width:1px; border-right-color:#000000; border-right-style:solid; border-bottom-style:solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
td.whs17 { width:33.333%; border-right-width:1px; border-right-color:#000000; border-right-style:solid; border-bottom-style:solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
td.whs18 { width:33.333%; padding-right:10px; padding-left:10px; border-left-style:solid; border-left-color:#000000; border-left-width:1px; border-right-style:solid; border-right-color:#000000; border-right-width:1px; border-bottom-width:1px; border-bottom-color:#000000; border-bottom-style:solid; }
td.whs19 { width:33.333%; padding-right:10px; padding-left:10px; border-right-style:solid; border-right-color:#000000; border-right-width:1px; border-bottom-width:1px; border-bottom-color:#000000; border-bottom-style:solid; }
td.whs20 { width:33.333%; padding-right:10px; padding-left:10px; border-left-width:1px; border-left-color:#000000; border-left-style:solid; border-right-width:1px; border-right-color:#000000; border-right-style:solid; border-bottom-style:solid; border-bottom-color:#000000; border-bottom-width:1px; }
td.whs21 { width:33.333%; padding-right:10px; padding-left:10px; border-right-width:1px; border-right-color:#000000; border-right-style:solid; border-bottom-style:solid; border-bottom-color:#000000; border-bottom-width:1px; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="whmsg.js"></script>
<script type="text/javascript" language="javascript" src="whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="whtopic.js"></script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.gbWhTopic)
{
	if (window.addTocInfo)
	{
	addTocInfo("Reactor XML Configuration File\n<reactor> tag\n<objects> tag\n<object> tag\n<hasOne> tag");
addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);

	if (window.setRelStartPage)
	{
	setRelStartPage("Reactor_Documentation.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}
}
else
	if (window.gbIE4)
		document.location.reload();
//-->
</script>
<h1>&lt;hasOne &gt; tag</h1>

<h4>Description</h4>

<p>The hasOne tag defines a relationship where a parent object has one 
 of a child object. &nbsp;This 
 relationship is useful in cases where the parent object is related to 
 a child object via a foreign key. &nbsp;To 
 clarify, in your database you may have Customer table and an Address table 
 with the following structure:</p>

<p>&nbsp;</p>

<p class="whs1">Customer 
 Table</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs2">

<tr>
<th scope="col" class="whs3">Name</th>
<th scope="col" class="whs4">Type</th>
<th scope="col" class="whs4">Nullable</th>
<th scope="col" class="whs4">Default</th>
<th scope="col" class="whs5">Other</th></tr>

<tr>
<td class="whs6">customerId</td>
<td class="whs7">Int</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">PK / Identity</td></tr>

<tr>
<td class="whs6">username</td>
<td class="whs7">Varchar(50)</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">&nbsp;</td></tr>

<tr>
<td class="whs6">password</td>
<td class="whs7">Varchar(50)</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">&nbsp;</td></tr>

<tr>
<td class="whs6">firstName</td>
<td class="whs7">Varchar(50)</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">&nbsp;</td></tr>

<tr>
<td class="whs6">lastName</td>
<td class="whs7">Varchar(50)</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">&nbsp;</td></tr>

<tr>
<td class="whs6">
<p>dateCreated</td>
<td class="whs7">
<p>DateTime</td>
<td class="whs7">
<p>No</td>
<td class="whs7">
<p>getDate()</td>
<td class="whs7">
<p>&nbsp;</td></tr>

<tr>
<td colspan="1" rowspan="1" class="whs8">
<p>addressId</td>
<td colspan="1" rowspan="1" class="whs9">
<p>Int</td>
<td colspan="1" rowspan="1" class="whs9">
<p>No</td>
<td colspan="1" rowspan="1" class="whs9">
<p>&nbsp;</td>
<td colspan="1" rowspan="1" class="whs7">
<p>FK to Address.addressId</td></tr>
</table>

<p>&nbsp;</p>

<p class="whs1">Address 
 Table</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs2">

<tr>
<th scope="col" class="whs3">Name</th>
<th scope="col" class="whs4">Type</th>
<th scope="col" class="whs4">Nullable</th>
<th scope="col" class="whs4">Default</th>
<th scope="col" class="whs5">Other</th></tr>

<tr>
<td class="whs6">
<p>addressId</td>
<td class="whs7">
<p>Int</td>
<td class="whs7">
<p>No</td>
<td class="whs7">
<p>&nbsp;</td>
<td class="whs7">
<p>PK / Identity</td></tr>

<tr>
<td class="whs6">
<p>street1</td>
<td class="whs7">
<p>Varchar(50)</td>
<td class="whs7">
<p>No</td>
<td class="whs7">
<p>&nbsp;</td>
<td class="whs7">
<p>&nbsp;</td></tr>

<tr>
<td class="whs6">
<p>street2</td>
<td class="whs7">
<p>Varchar(50)</td>
<td class="whs7">
<p>Yes</td>
<td class="whs7">
<p>&nbsp;</td>
<td class="whs7">
<p>&nbsp;</td></tr>

<tr>
<td class="whs6">
<p>city</td>
<td class="whs7">
<p>Varchar(50)</td>
<td class="whs7">
<p>No</td>
<td class="whs7">
<p>&nbsp;</td>
<td class="whs7">
<p>&nbsp;</td></tr>

<tr>
<td class="whs6">
<p>state</td>
<td class="whs7">
<p>Varchar(50)</td>
<td class="whs7">
<p>No</td>
<td class="whs7">
<p>&nbsp;</td>
<td class="whs7">
<p>&nbsp;</td></tr>

<tr>
<td class="whs8">
<p>zip</td>
<td class="whs9">
<p>Varchar(10)</td>
<td class="whs9">
<p>No</td>
<td class="whs9">
<p>&nbsp;</td>
<td class="whs7">
<p>&nbsp;</td></tr>
</table>

<p>&nbsp;</p>

<p>Without any configuration, an instance of a Customer Record will automatically 
 have getters and setters for each of the fields in the table. &nbsp;However, 
 with a little extra configuration you tell Reactor that your Customer 
 has one Address by virtue of the addressId field in both tables. &nbsp;Here 
 is an example of that configuration:</p>

<p class=Preformatted-code>&nbsp;</p>

<p class=code>&lt;reactor&gt;<br>
 &nbsp;&lt;objects&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Customer&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hasOne 
 name=&quot;Address&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;relate 
 from=&quot;addressId&quot; to=&quot;addressId&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/hasOne&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;/object&gt;<br>
<br>
 &nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Address&quot; /&gt;<br>
 &nbsp;&lt;/objects&gt;<br>
&lt;/reactor&gt;</p>

&nbsp; 

<br>Now, 
 when you generate the Customer Record it will not have these additional 
 methods: 

<br>&nbsp;<br>

<ul type="disc" class="whs10">
	
	<li class=kadov-p
		class=kadov-p><span class=function>getAddress()</span> - returns 
 an Address Record corresponding to the Customer's addressId value. &nbsp;If 
 the addressId was null then an empty Address record is returned</li>
	
	<li class=kadov-p
		class=kadov-p><span class=function>setAddress()</span> - accepts 
 an Address Record which is used to set the Customer's addressId value.</li>
</ul>

&nbsp; 

<p class=note>Note: all reactor generated methods with return objects lazy 
 load the object. &nbsp;In 
 other words the Address object is not instantiated or read from the database 
 until you call <span class=function>getAddress()</span>. &nbsp;Additionally 
 these objects are cached. &nbsp;Calling 
 <span class=function>getAddress()</span> two times will return the same 
 instance of the address. </p>

&nbsp; 

<br>The 
 hasOne tag has one child tag, relate, which specify the fields which relate 
 the two objects. &nbsp;You 
 can nest multiple relate tags to indicate that the relationship between 
 the objects depends on multiple fields. &nbsp;For 
 example: 

<br>&nbsp; 
 

<p class=code>&lt;reactor&gt;<br>
 &nbsp;&lt;objects&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Customer&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hasOne 
 name=&quot;Address&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;relate 
 from=&quot;addressId&quot; to=&quot;addressId&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;relate 
 from=&quot;fooId&quot; to=&quot;fooId&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/hasOne&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&lt;/object&gt;<br>
<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Address&quot; /&gt;<br>
 &nbsp;&lt;/objects&gt;<br>
&lt;/reactor&gt;</p>

&nbsp; 

<br>This 
 example shows that the Customer is related by two columns to the Address, 
 addressId and fooId which exist in both tables. &nbsp;This 
 feature is useful when you have compound foreign keys defined in your 
 database. 

<br>&nbsp; 
 

<br>The 
 hasOne tag has an optional alias argument. &nbsp;When 
 not provided the alias defaults to the value of the name attribute. &nbsp;The 
 alias argument controls how the methods generated from the relationship 
 are named. &nbsp;For 
 example, in the example above the Customer object hasMany Address objects. 
 This causes the method name getAddressIterator() to be returned. &nbsp;If 
 you wanted to rename this method to something else you can provide an 
 alias on the relationship tag. &nbsp;If 
 you provided an alias of &quot;Location&quot; the generated method would 
 be named <span class=function>getLocatinIterator().</span> 

<br>&nbsp; 
 

<br>Unlike 
 the relate tag, you can express multi-step relationships by providing 
 multiple link tags. 

<br>&nbsp; 
 

<br>Another 
 feature of the hasOne relationship is the use of &quot;shared keys&quot;. 
 &nbsp;Shared 
 keys are useful when the field being related is the primary key on both 
 objects. &nbsp;For 
 example, consider a situation where you have a core type of user. &nbsp;However, 
 you might have variations on this type of user, each which collect their 
 own data. &nbsp;Consider 
 these tables as an example: 

<br>&nbsp; 
 

<p class="whs1"><span><U>User 
 Table</U></span></p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs2">

<tr>
<th scope="col" class="whs3">Name</th>
<th scope="col" class="whs4">Type</th>
<th scope="col" class="whs4">Nullable</th>
<th scope="col" class="whs4">Default</th>
<th scope="col" class="whs5">Other</th></tr>

<tr>
<td class="whs6">userId</td>
<td class="whs7">Int</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">PK / Identity</td></tr>

<tr>
<td class="whs6">username</td>
<td class="whs7">Varchar(50)</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">&nbsp;</td></tr>

<tr>
<td class="whs6">password</td>
<td class="whs7">Varchar(50)</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">&nbsp;</td></tr>

<tr>
<td class="whs6">firstName</td>
<td class="whs7">Varchar(50)</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">&nbsp;</td></tr>

<tr>
<td class="whs6">lastName</td>
<td class="whs7">Varchar(50)</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">&nbsp;</td></tr>

<tr>
<td class="whs8">
<p>dateCreated</td>
<td class="whs9">
<p>DateTime</td>
<td class="whs9">
<p>No</td>
<td class="whs9">
<p>getDate()</td>
<td class="whs7">
<p>&nbsp;</td></tr>
</table>

<p>&nbsp;</p>

<p class="whs1">Physician 
 Table</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs2">

<tr>
<th scope="col" class="whs3">Name</th>
<th scope="col" class="whs4">Type</th>
<th scope="col" class="whs4">Nullable</th>
<th scope="col" class="whs4">Default</th>
<th scope="col" class="whs5">Other</th></tr>

<tr>
<td class="whs6">physicianId</td>
<td class="whs7">Int</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">PK / FK to User.userId</td></tr>

<tr>
<td colspan="1" rowspan="1" class="whs8">
<p>licensedState</td>
<td colspan="1" rowspan="1" class="whs9">
<p>Varchar(10)</td>
<td colspan="1" rowspan="1" class="whs9">
<p>No</td>
<td colspan="1" rowspan="1" class="whs9">
<p>&nbsp;</td>
<td colspan="1" rowspan="1" class="whs7">
<p>&nbsp;</td></tr>
</table>

&nbsp; 

<br><span 
 style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/ "><U>Developer 
 Table</U></span> 

<br>&nbsp;<br>

<table x-use-null-cells cellspacing="0" width="100%" class="whs2">

<tr>
<th scope="col" class="whs3">Name</th>
<th scope="col" class="whs4">Type</th>
<th scope="col" class="whs4">Nullable</th>
<th scope="col" class="whs4">Default</th>
<th scope="col" class="whs5">Other</th></tr>

<tr>
<td class="whs6">
<p>developerId</td>
<td class="whs7">Int</td>
<td class="whs7">No</td>
<td class="whs7">&nbsp;</td>
<td class="whs7">PK / FK to User.userId</td></tr>

<tr>
<td class="whs6">
<p>language</td>
<td class="whs7">
<p>Varchar(50)</td>
<td class="whs7">
<p>No</td>
<td class="whs7">
<p>&nbsp;</td>
<td class="whs7">
<p>&nbsp;</td></tr>

<tr>
<td colspan="1" rowspan="1" class="whs8">
<p>likesCoffee</td>
<td colspan="1" rowspan="1" class="whs9">
<p>Bit</td>
<td colspan="1" rowspan="1" class="whs9">
<p>No</td>
<td colspan="1" rowspan="1" class="whs9">
<p>1</td>
<td colspan="1" rowspan="1" class="whs7">
<p>&nbsp;</td></tr>
</table>

&nbsp; 

<br><span>As 
 you can see, the Physician and Developer table's primary key values are 
 </span><span style="font-style: italic;"><I>not</I></span><span> identity or 
 auto number values. &nbsp;Instead, 
 they are foreign keys to the user table. &nbsp;This 
 means that one Physician Record relates directly to one User Record.</span> 
 

<br>&nbsp; 
 

<br>Reactor 
 supports cascading saves. &nbsp;This 
 means that if you load a Physician Record and it's configure to have one 
 User Record that saving the Physician will save the User. &nbsp;However, 
 because the Phsyician's PK value is based on the value of the User Record 
 the User Record must be saved first. &nbsp;To 
 automate this process you can set the sharedKey attribute on the Physician 
 (or Developer) to true. &nbsp;Reactor 
 will automatically save the records correctly. &nbsp;

<br>&nbsp; 
 

<br>Here's 
 an example configuration: 

<br>&nbsp; 
 

<p class=code>&lt;reactor&gt;<br>
 &nbsp;&lt;objects&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Physician&quot; sharedKey=&quot;true&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hasOne 
 name=&quot;User&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;relate 
 from=&quot;physicianId&quot; to=&quot;userId&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/hasOne&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;/object&gt;<br>
<br>
 &nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Developer&quot; sharedKey=&quot;true&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hasOne 
 name=&quot;User&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;relate 
 from=&quot;developerId&quot; to=&quot;userId&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/hasOne&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;/object&gt;<br>
<br>
 &nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;User&quot; /&gt;<br>
<br>
 &nbsp;&lt;/objects&gt;<br>
&lt;/reactor&gt;</p>

&nbsp; 

<br>This 
 configuration will allow for the following code to work: 

<p>&nbsp;</p>

<p class=code>&lt;!--- create the reactorFactory ---&gt;<br>
&lt;cfset Reactor = CreateObject(&quot;Component&quot;, &quot;reactor.reactorFactory&quot;).init(expandPath(&quot;reactor.xml&quot;)) 
 /&gt;<br>
<br>
&lt;!--- populate the physician ---&gt;<br>
&lt;cfset Physician = Reactor.createRecord(&quot;Physician&quot;) /&gt;<br>
&lt;cfset Physician.setLanguage(&quot;ColdFusion&quot;) /&gt;<br>
&lt;cfset Physician.setLikesCoffee(true) /&gt;<br>
&lt;cfset Physician.getUser().setUsername(&quot;dhughes&quot;) /&gt;<br>
&lt;cfset Physician.getUser().setPassword(&quot;example&quot;) /&gt;<br>
&lt;cfset Physician.getUser().setFirstName(&quot;Doug&quot;) /&gt;<br>
&lt;cfset Physician.getUser().setLastName(&quot;Hughes&quot;) /&gt;<br>
<br>
&lt;!--- save the physician ---&gt;<br>
&lt;cfset Physician.save() /&gt;</p>

&nbsp; 

<br>This 
 example will save the User, get the userId and set that into the phsycianId 
 before saving the physician. 

<h4>Attributes</h4>

<table x-use-null-cells cellspacing="0" width="100%" class="whs11">
<col class="whs12">
<col class="whs12">
<col class="whs12">

<tr valign="top" class="whs13">
<th scope="col" width="33.333%" class="whs14">
<p>Attribute</th>
<th scope="col" width="33.333%" class="whs15">
<p>Required</th>
<th scope="col" width="33.333%" class="whs15">
<p>Description</th></tr>

<tr valign="top" class="whs13">
<td width="33.333%" class="whs16">
<p>name</td>
<td width="33.333%" class="whs17">
<p>yes</td>
<td width="33.333%" class="whs17">
<p>The alias of the related object.</p>
<p>&nbsp;</p>
<p class=note>Note: if you did not specify an alias for the object that 
 you are relating to, the alias is defaulted to the object's name.</td></tr>

<tr valign="top" class="whs13">
<td colspan="1" rowspan="1" width="33.333%" class="whs18">
<p>alias</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs19">
<p>no</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs19">
<p>The alias to assign to this relationship. &nbsp;When 
 not provided this defaults to the value of the name attribute.</td></tr>

<tr valign="top" class="whs13">
<td colspan="1" rowspan="1" width="33.333%" class="whs20">
<p>sharedKey</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs21">
<p>No</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs21">
<p>This indicates if the primary key on this object is related to the primary 
 on the related object. &nbsp;When 
 not provided this defaults to false. &nbsp;</td></tr>
</table>

<h4>Child tags</h4>

<table x-use-null-cells cellspacing="0" width="100%" class="whs11">
<col class="whs12">
<col class="whs12">
<col class="whs12">

<tr valign="top" class="whs13">
<th scope="col" width="33.333%" class="whs14">
<p>Tag</th>
<th scope="col" width="33.333%" class="whs15">
<p>Required</th>
<th scope="col" width="33.333%" class="whs15">
<p>Description</th></tr>

<tr valign="top" class="whs13">
<td width="33.333%" class="whs16">
<p><a href="relate_tag.htm">relate</a></td>
<td width="33.333%" class="whs17">
<p>yes</td>
<td width="33.333%" class="whs17">
<p>Defines what fields that relate this object to the related object.</td></tr>
</table>

<h4>Example</h4>

<p class=code>&lt;reactor&gt;<br>
 &nbsp;&lt;objects&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Customer&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hasOne 
 &nbsp;name=&quot;Address&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;relate 
 from=&quot;addressId&quot; to=&quot;addressId&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/hasOne&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;/object&gt;<br>
<br>
 &nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Address&quot; /&gt;<br>
 &nbsp;&lt;objects&gt;<br>
&lt;/reactor&gt;</p>

<script type="text/javascript" language="javascript1.2">
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);
//-->
</script>
</body>
</html>
