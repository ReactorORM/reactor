<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>object tag</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="default_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='default.css'>");}
//-->
</script>
<style type="text/css">
<!--
table.whs1 { x-cell-content-align:top; width:100%; border-spacing:0px; }
col.whs2 { width:33.333%; }
tr.whs3 { x-cell-content-align:top; }
th.whs4 { width:33.333%; border-left-width:1px; border-left-color:#000000; border-left-style:Solid; border-top-style:Solid; border-top-color:#000000; border-top-width:1px; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
th.whs5 { width:33.333%; border-top-style:Solid; border-top-color:#000000; border-top-width:1px; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
td.whs6 { width:33.333%; border-left-width:1px; border-left-color:#000000; border-left-style:Solid; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
td.whs7 { width:33.333%; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
td.whs8 { width:33.333%; padding-right:10px; padding-left:10px; border-left-style:Solid; border-left-color:#000000; border-left-width:1px; border-right-style:Solid; border-right-color:#000000; border-right-width:1px; border-bottom-width:1px; border-bottom-color:#000000; border-bottom-style:Solid; }
td.whs9 { width:33.333%; padding-right:10px; padding-left:10px; border-right-style:Solid; border-right-color:#000000; border-right-width:1px; border-bottom-width:1px; border-bottom-color:#000000; border-bottom-style:Solid; }
p.whs10 { font-weight:bold; }
table.whs11 { x-cell-content-align:top; width:100%; border-spacing:0px; }
td.whs12 { width:33.333%; padding-right:10px; padding-left:10px; border-left-width:1px; border-left-color:#000000; border-left-style:Solid; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; }
td.whs13 { width:33.333%; padding-right:10px; padding-left:10px; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="whmsg.js"></script>
<script type="text/javascript" language="javascript" src="whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="whtopic.js"></script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.gbWhTopic)
{
	if (window.addTocInfo)
	{
	addTocInfo("Reactor XML Configuration File\n<reactor> tag\n<objects> tag\n<object> tag");
addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);

	if (window.setRelStartPage)
	{
	setRelStartPage("Reactor_Documentation.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}
}
else
	if (window.gbIE4)
		document.location.reload();
//-->
</script>
<h1>&lt;object&gt; tag</h1>

<h4>Description</h4>

<p>The object tag is used to define an object. &nbsp;Attributes 
 on the tag and sets of child tags define details about reactor generated 
 objects. &nbsp;For 
 example you can use an alias tag on the object to rename an object from 
 something like &quot;tbl_Cust_Markets&quot; to &quot;CustomerMarket&quot;. 
 &nbsp;You can 
 use the field tag to do the same thing for fields. &nbsp;The 
 hasOne and hasMany tags are used to define relationships between objects.</p>

<p>&nbsp;</p>

<p>Ultimately the settings defined via the object tag control most of Reactor's 
 functionality.</p>

<p>&nbsp;</p>

<p>The name attribute is used to specify either a table or view in your 
 database.</p>

<p>&nbsp;</p>

<p>To create instances of an object you are not required to specify an 
 object tag. &nbsp;If 
 you had a table in your database called &quot;tbl_Cust_Markets&quot; you 
 can, without specifying an object tag, instantiate objects based on the 
 table. &nbsp;For 
 example (assuming the ReactorFactory has already been instantiated):</p>

<p>&nbsp;</p>

<p class=code>&lt;cfset CustomerMarketRecord = ReactorFactory.createRecord(&quot;tbl_Cust_Markets&quot;) 
 /&gt;</p>

<p>&nbsp;</p>

<p>The resulting objects will be written under the <a href="project_tag.htm">project</a> 
 directory and the <a href="mapping_tag.htm">mapping</a> directory with 
 names like &quot;tbl_Cust_MarketsRecord.cfc&quot;. &nbsp;This 
 may be adequate for your needs, but it's not really elegant. &nbsp;A 
 better option would be to define the object using an object tag and to 
 give it an alias. &nbsp;For 
 example:</p>

<p>&nbsp;</p>

<p class=code>&lt;object name=&quot;tbl_Cust_Markets&quot; alias=&quot;CustomerMarket&quot; 
 /&gt;</p>

<p>&nbsp;</p>

<p class=note>Note: The alias is singular because each of a common convention 
 in Reactor. &nbsp;For 
 example, one record represents one row in the database. &nbsp;It 
 doesn't really make sense to have a UsersRecord. &nbsp;A 
 UserRecord makes more sense.</p>

&nbsp;

<br>Given 
 the configuration above you can now instantiate a CustomerMarket record 
 like this:

<br>&nbsp;

<p class=code>&lt;cfset CustomerMarketRecord = ReactorFactory.createRecord(&quot;CustomerMarket&quot;) 
 /&gt;</p>

&nbsp;

<br>Not 
 only do you specify the alias in the createRecord method, the alias is 
 used when writing files to disk. &nbsp;You'll 
 end up with files with names like &quot;CustomerMarketRecord.cfc&quot;.

<br>&nbsp;

<p class=note>Note: Throughout the framework methods which require you 
 to specify objects actually only accept object aliases. &nbsp;In 
 the case that you don't provide an object alias Reactor simply sets the 
 alias to the name.</p>

<h4>Attributes</h4>

<table x-use-null-cells cellspacing="0" width="100%" class="whs1">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="33.333%" class="whs4">
<p>Attribute</th>
<th scope="col" width="33.333%" class="whs5">
<p>Required</th>
<th scope="col" width="33.333%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="33.333%" class="whs6">
<p>name</td>
<td width="33.333%" class="whs7">
<p>Yes</td>
<td width="33.333%" class="whs7">
<p>This is the name of the object as defined in your database. &nbsp;This 
 may or may not be case sensitive, depending on your DBMS. &nbsp;An 
 object may be a table or a view. &nbsp;If 
 an alias is not provided then the name attribute will define the name 
 of objects as they are written to disk and as they are </td></tr>

<tr valign="top" class="whs3">
<td colspan="1" rowspan="1" width="33.333%" class="whs8">
<p>alias</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs9">
<p>No</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs9">
<p>This is an alias by which you will address this object. &nbsp;The 
 alias will be used to name objects on disk and to instantiate instances 
 of reactor generated objects for this object.</p>
<p>&nbsp;</p>
<p class="whs10">If this attribute is not provided it is defaulted 
 to the value of the name attribute.</td></tr>
</table>

<h4>Child Tags</h4>

<table x-use-null-cells cellspacing="0" width="100%" class="whs11">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="33.333%" class="whs4">
<p>Tag</th>
<th scope="col" width="33.333%" class="whs5">
<p>Required</th>
<th scope="col" width="33.333%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="33.333%" class="whs6">
<p>field</td>
<td width="33.333%" class="whs7">
<p>No</td>
<td width="33.333%" class="whs7">
<p>I define alias for a field and sequences for fields on DBMS that require 
 them.</td></tr>

<tr valign="top" class="whs3">
<td colspan="1" rowspan="1" width="33.333%" class="whs8">
<p>hasOne</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs9">
<p>No</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs9">
<p>I define a relationship where this object has one of another object. 
 &nbsp;For example, 
 a user may have one address.</td></tr>

<tr valign="top" class="whs3">
<td colspan="1" rowspan="1" width="33.333%" class="whs12">
<p>hasMany</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs13">
<p>No</td>
<td colspan="1" rowspan="1" width="33.333%" class="whs13">
<p>I define a relationship where this object has many of another object. 
 &nbsp;For example, 
 an address may have many users.</td></tr>
</table>

<h4>Example</h4>

<p class=code>&lt;reactor&gt;<br>
 &nbsp;&nbsp;&lt;objects&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;User&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hasOne 
 name=&quot;Address&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;relate 
 from=&quot;addressId&quot; to=&quot;addressId&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/hasOne&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/objects&gt;<br>
<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;object 
 name=&quot;Address&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hasMany 
 name=&quot;User&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;relate 
 from=&quot;addressId&quot; to=&quot;addressId&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/hasMany&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/objects&gt;<br>
 &nbsp;&nbsp;&lt;/objects&gt;<br>
&lt;/reactor&gt;</p>

<script type="text/javascript" language="javascript1.2">
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);
//-->
</script>
</body>
</html>
