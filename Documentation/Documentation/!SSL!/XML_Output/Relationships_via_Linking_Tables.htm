<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>
  <title>Relationships via Linking Tables</title><!--(Meta)==========================================================-->
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com" />
  <meta name="generator-major-version" content="0.1" />
  <meta name="generator-minor-version" content="1" />
  <meta name="filetype" content="kadov" />
  <meta name="filetype-version" content="1" />
  <meta name="page-count" content="1" />
  <meta name="layout-height" content="2288" />
  <meta name="layout-width" content="1346" /><!--(Links)=========================================================-->
  <link rel="StyleSheet" href="default.css" />
</head><!--(Body)==========================================================-->

<body>
  <h1>Relationships via Linking Tables</h1>

  <p>Let's pretend for a moment that we really are building some sort of eCommerce site. (Perhaps we sell silly lights that look like they're wearing hats!) <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p> </p>

  <p>To do this, we would need to have a table of products which would hold the details of the lamps being sold. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->This is easy. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p> </p>

  <p>But, what if we wanted to associate the products a Customer bought back to them somehow? <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Or, what if we wanted to be able to pull a report on all the invoices for the day? <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Or, what if we wanted to find all the people who purchased a particularly strange lamp so that we could report them to the authorities?</p>

  <p> </p>

  <p>It sounds to me like we're going to need to have a table of invoices. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->An Invoice would represent all the items a customer purchased in one transaction. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->We could have multiple invoices per customer. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p> </p>

  <p>To relate products to invoices we'll have to create a table that relates to the two. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Reactor thinks of these as "Linking" tables. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Linking tables are tables that relate two tables to each other.</p>

  <p> </p>

  <p>Let's do some quick database designing:</p>

  <p> </p>

  <p style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/"><span>Product Table</span></p>

  <p> </p><!--(Table)=========================================================-->

  <table x-use-null-cells="" style="width: 100%; border-spacing: 0px; border-spacing: 0px;" cellspacing="0" width="100%">
    <tr>
      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Name</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Type</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Nullable</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Default</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Other</th>
    </tr>

    <tr>
      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>productId</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>Int</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>No</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>PK / Identity</p>
      </td>
    </tr>

    <tr>
      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>name</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>Varchar(50)</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>No</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>
    </tr>

    <tr>
      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>description</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>Varchar(2000)</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>No</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>
    </tr>

    <tr>
      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>price</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>Money</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>No</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>
    </tr>
  </table>

  <p> </p>

  <p style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/">Invoice Table</p>

  <p> </p><!--(Table)=========================================================-->

  <table x-use-null-cells="" style="width: 100%; border-spacing: 0px; border-spacing: 0px;" cellspacing="0" width="100%">
    <tr>
      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Name</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Type</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Nullable</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Default</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Other</th>
    </tr>

    <tr>
      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>invoiceId</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Int</td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">No</td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;"> </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">PK / Identity</td>
    </tr>

    <tr>
      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>customerId</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Int</td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">No</td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;"> </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">FK to Customer.customerId</td>
    </tr>
  </table>

  <p> </p>

  <p style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/">InvoiceProduct Table</p>

  <p style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/"> </p><!--(Table)=========================================================-->

  <table x-use-null-cells="" style="width: 100%; border-spacing: 0px; border-spacing: 0px;" cellspacing="0" width="100%">
    <tr>
      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Name</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Type</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Nullable</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Default</th>

      <th scope="col" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">Other</th>
    </tr>

    <tr>
      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>productInvoiceId</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>Int</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>No</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">PK / Identity</td>
    </tr>

    <tr>
      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>invoiceId</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>Int</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>No</p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>

      <td style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>FK to Invoice.invoiceId</p>
      </td>
    </tr>

    <tr>
      <td colspan="1" rowspan="1" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>productId</p>
      </td>

      <td colspan="1" rowspan="1" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>Int</p>
      </td>

      <td colspan="1" rowspan="1" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>No</p>
      </td>

      <td colspan="1" rowspan="1" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p> </p>
      </td>

      <td colspan="1" rowspan="1" style="padding-left: 3px; padding-top: 3px; padding-right: 3px; padding-bottom: 3px;">
        <p>FK to Customer.customerId</p>
      </td>
    </tr>
  </table>

  <p style="x-text-underline: normal; /*begin!kadov{{*/ text-decoration: underline; /*}}end!kadov*/"> </p>

  <p class="note">Note: These are example tables. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->You probably wouldn't do anything this simple in a real application. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Also, I used varchar(2000) for the product description so that the "like" operator would work in a future example.</p> 

  <p>By now you should know that by simply creating the tables in your database you can now generate and instantiate Record objects which represent the tables. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->So, we're going to skip over that part. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p> </p>

  <p>Think about what you know right now and how you'd configure these tables in the database. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->You would have a hasMany relationship from both Invoice and Product to the InvoiceProduct table. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->The InvoiceProduct table would have two hasOne relationships back to Invoice and Product.</p>

  <p> </p>

  <p>Given that, what would your code look like if you wanted to get all the products on a particular invoice? <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Maybe like this:</p>

  <p> </p>

  <p class="code">&lt;!--- create the reactorFactory ---&gt;<br />
  &lt;cfset Reactor = CreateObject("Component", "reactor.reactorFactory").init(expandPath("reactor.xml")) /&gt;<br />
  <br />
  &lt;!--- create an invoice record ---&gt;<br />
  &lt;cfset InvoiceRecord = Reactor.createRecord("Invoice").load(invoiceId=1) /&gt;<br />
  <br />
  &lt;!--- output all the products on this invoice ---&gt;<br />
  <br />
  &lt;!--- get all of the Invoice Product Records ---&gt;<br />
  &lt;cfset InvoiceProducts = InvoiceRecord.getInvoiceProductIterator().getArray() /&gt;<br />
  <br />
  &lt;!--- loop over the invoice products and get the product record ---&gt;<br />
  &lt;cfloop from="1" to="#ArrayLen(InvoiceProducts)#" index="x"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfset ProductRecord = InvoiceProducts[x].getProduct()/&gt;<br />
  <br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfoutput&gt;<br />
  <!--kadov_tag{{<spaces>}}-->        <!--kadov_tag{{</spaces>}}-->#ProductRecord.getName()#&lt;br&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;/cfoutput&gt;<br />
  &lt;/cfloop&gt;</p>  <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->This code is a bit of a pain. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->It’s not evil, but it’s not something I'd want to do all the time. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Not to mention, the fact that each one of those <span class="function">getProduct()</span> method calls executes a query. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->This is not a good solution! <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}--> 

  <p>Wouldn't it be cool if we could somehow tell the Invoice and Product tables that they were linked? <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->And maybe then we'd be able to use the same Iterator interface we did for other hasMany relationships? <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Not to worry, you can!</p>

  <p> </p>

  <p>To support this, you use the "link" tag inside a hasMany tag. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->For example:</p>

  <p> </p>

  <p class="code">&lt;object name="Product"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;hasMany name="Invoice"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->        <!--kadov_tag{{</spaces>}}-->&lt;link name="InvoiceProduct" /&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;/hasMany&gt;<br />
  &lt;/object&gt;<br />
  <br />
  &lt;object name="Invoice"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->  <!--kadov_tag{{</spaces>}}-->&lt;hasMany name="Product"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->       <!--kadov_tag{{</spaces>}}-->&lt;link name="InvoiceProduct" /&gt;<br />
  <!--kadov_tag{{<spaces>}}-->  <!--kadov_tag{{</spaces>}}-->&lt;/hasMany&gt;<br />
  &lt;/object&gt;<br />
  <br />
  &lt;object name="InvoiceProduct"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;hasOne name="Product"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->        <!--kadov_tag{{</spaces>}}-->&lt;relate from="productId" to="productId" /&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;/hasOne&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;hasOne name="Invoice"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->        <!--kadov_tag{{</spaces>}}-->&lt;relate from="invoiceId" to="invoiceId" /&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;/hasOne&gt;<br />
  &lt;/object&gt;</p>  <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->Take a look at the Product and Invoice configurations. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->The configuration is effectively saying that an Invoice has many Products by virtue of a link through InvoiceProduct (which has one of both). <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->It works the other way around too. <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}--> 

  <p class="note">Note: Adding a link through another table implicitly adds a hasOne relationship to the object with the link. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->So, the link from Product to Invoice says to Reactor that the Product hasOne InvoiceProduct.</p>  <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->Now, let's rewrite the code above and make it a bit nicer: <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}--> 

  <p class="code">&lt;!--- create the reactorFactory ---&gt;<br />
  &lt;cfset Reactor = CreateObject("Component", "reactor.reactorFactory").init(expandPath("reactor.xml")) /&gt;<br />
  <br />
  &lt;!--- create an invoice record ---&gt;<br />
  &lt;cfset InvoiceRecord = Reactor.createRecord("Invoice").load(invoiceId=1) /&gt;<br />
  <br />
  &lt;!--- dump all of the Products on the invoice ---&gt;<br />
  &lt;cfdump var="#InvoiceRecord.getProductIterator().getQuery()#" /&gt;</p> 

  <p>Wasn't that easier? <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Reactor intelligently knows how to join the Invoice table to the InvoiceProduct table to the Product table. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Furthermore, it returns only the records from the product table.</p>

  <p> </p>

  <p>This leads me to the last few points in this crash course, how to customize Reactor generated objects.</p>
</body>
</html>
