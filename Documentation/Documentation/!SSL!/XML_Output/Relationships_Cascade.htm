<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>
  <title>Relationships Cascade</title><!--(Meta)==========================================================-->
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com" />
  <meta name="generator-major-version" content="0.1" />
  <meta name="generator-minor-version" content="1" />
  <meta name="filetype" content="kadov" />
  <meta name="filetype-version" content="1" />
  <meta name="page-count" content="1" />
  <meta name="layout-height" content="1501" />
  <meta name="layout-width" content="1153" /><!--(Links)=========================================================-->
  <link rel="StyleSheet" href="default.css" />
</head><!--(Body)==========================================================-->

<body>
  <h1>Digging Into Relationships</h1>

  <p>One important thing to keep in mind is that Record objects lazy-load and cache related records. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->That is to say that, when getAddressRecord() was called, behind the scenes, a new record object was created, populated and stored in the variables scope of the CustomerRecord. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p> </p>

  <p>That means that if you call this method twice while, betwixt the first and second call, someone else updates the Address, the data in your second call will not contain the changes made by the other person.</p>

  <p> </p>

  <p>In fact, all objects that do not contain mutable (changable) instance data are cached by the framework and become singletons within one instance of the ReactorFactory.</p>

  <p> </p>

  <p>Additionally, when you call save on a record with relationships to other records the save will cascade down to related objects which are either new or have been modified. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->For example, a customer hasOne address. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->When you save the customer the customer's address will also be saved if it's been modified. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->In Reactor's vocabulary records which have been modified are said to be "dirty".</p>

  <p> </p>

  <p>Deletes do not cascade. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->If you attempt to delete something which violates a foreign key constraint you will receive an error.</p>

  <p> </p>

  <p>Let's take a look at cascading saves. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Here's some code which will create a new Customer and Address. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Note that to save both the user and the address I only call save on the Customer:</p>

  <p> </p>

  <p class="code">&lt;!--- create the reactorFactory ---&gt;<br />
  &lt;cfset Reactor = CreateObject("Component", "reactor.reactorFactory").init(expandPath("reactor.xml")) /&gt;<br />
  <br />
  &lt;!--- create a customerRecord ---&gt;<br />
  &lt;cfset CustomerRecord = Reactor.createRecord("Customer") /&gt;<br />
  <br />
  &lt;!--- get the user record's address ---&gt;<br />
  &lt;cfset AddressRecord = CustomerRecord.getAddress() /&gt;<br />
  <br />
  &lt;!--- populate the customer and address ---&gt;<br />
  &lt;cfset CustomerRecord.setUsername("jblow") /&gt;<br />
  &lt;cfset CustomerRecord.setPassword("9ummy") /&gt;<br />
  &lt;cfset CustomerRecord.setFirstName("Joe") /&gt;<br />
  &lt;cfset CustomerRecord.setLastName("Blow") /&gt;<br />
  <br />
  &lt;cfset AddressRecord.setStreet1("1234 Left Turn Ln.") /&gt;<br />
  &lt;cfset AddressRecord.setCity("Albuquerque") /&gt;<br />
  &lt;cfset AddressRecord.setState("New Mexico") /&gt;<br />
  &lt;cfset AddressRecord.setZip("87112") /&gt;<br />
  <br />
  &lt;!--- save the customer and address! ---&gt;<br />
  &lt;cfset CustomerRecord.save() /&gt;</p>  <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->This also works when updating records. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->The following code demonstrates loading the Customer, updating its address, and then saving the changes. <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}--> 

  <p class="code">&lt;!--- create the reactorFactory ---&gt;<br />
  &lt;cfset Reactor = CreateObject("Component", "reactor.reactorFactory").init(expandPath("reactor.xml")) /&gt;<br />
  <br />
  &lt;!--- create a customerRecord ---&gt;<br />
  &lt;cfset CustomerRecord = Reactor.createRecord("Customer").load(customerId=2) /&gt;<br />
  <br />
  &lt;!--- update the customer's address ---&gt;<br />
  &lt;cfset CustomerRecord.getAddress().setStreet1("432 Foo Ln.") /&gt;<br />
  &lt;cfset CustomerRecord.getAddress().setCity("Dead Horse") /&gt;<br />
  &lt;cfset CustomerRecord.getAddress().setState("Alaska") /&gt;<br />
  &lt;cfset CustomerRecord.getAddress().setZip("99723") /&gt;<br />
  <br />
  &lt;!--- save the changes---&gt;<br />
  &lt;cfset CustomerRecord.save() /&gt;</p>  <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->Note that rather than saving the address I simply call <span class="function">save()</span> on the CustomerRecord. <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}--> 

  <p class="Quiz"><span style="font-weight: bold;">Pop Quiz:</span> How many queries were run in the last block of code?<br />
  <br />
  Answer: Three. One to load the CustomerRecord when <span class="function">load()</span> is called. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->One to load the Address when <span class="function">getAddress()</span> is first called (Reactor lazy-loads the AddressRecord and caches it in the CustomerRecord). One to save the Address when <span class="function">save()</span> is called on the CustomerRecord. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->The customer is not saved because it's not dirty.</p>  <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->If you skipped the pop quiz, please go back and read it. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->It illustrates the point that related data is lazy loaded and that only dirty data is saved. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->
   <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->  <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->If you had instead only updated the CustomerRecord and never loaded the address then the call to the <span class="function">save()</span> method would have only saved the CustomerRecord. <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->  <!--begin!kadov{{--><br />
  <!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->Furthermore, relationships can be deeper than just one level. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->For example, it would be a better practice to have the Address's state be stored in a State lookup table. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->This would mean that an Address would haveOne State. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Now, for the sake of argument, let's say you load a customer, change it's first name, then get the AddressRecord and from the AddressRecord you get the StateRecord and change the state's abbreviation. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->(It's a weak example, but work with me.) <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->When you call <span class="function">save()</span> on the CustomerRecord the Customer will be saved and the State will be saved. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->The AddressRecord will not be saved but will cascade the save.
</body>
</html>
