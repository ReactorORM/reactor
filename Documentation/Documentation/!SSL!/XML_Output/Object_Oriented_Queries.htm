<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>
  <title>Object Oriented Queries</title><!--(Meta)==========================================================-->
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com" />
  <meta name="generator-major-version" content="0.1" />
  <meta name="generator-minor-version" content="1" />
  <meta name="filetype" content="kadov" />
  <meta name="filetype-version" content="1" />
  <meta name="page-count" content="1" />
  <meta name="layout-height" content="1016" />
  <meta name="layout-width" content="1346" /><!--(Links)=========================================================-->
  <link rel="StyleSheet" href="default.css" />
</head><!--(Body)==========================================================-->

<body>
  <h1>Object Oriented Queries</h1>

  <p>Behind the scenes, in all gateway objects Reactor actually uses a "Query" object to abstract queries. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p> </p>

  <p>For example, each gateway object has a method called <span class="function">getByFields()</span>. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->This method has optional arguments for each field in the table. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->As you pass in values, Reactor actually creates a Query object, which represents the query you want to run. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Each field you pass into the <span class="function">getByFields()</span> method is added to the "where" portion of the Query object.</p>

  <p> </p>

  <p>Once completely configured, that query object is passed off to a <span class="function">getByQuery()</span> method which exists on the AbstractGateway object which we briefly mentioned earlier in this document. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->That <span class="function">getByQuery()</span> method translates the Query object into a parameterized query, executes it, and returns the results.</p>

  <p> </p>

  <p>There's no reason you can't use this same mechanism to get the total a customer spent. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->I'll show you how to rewrite the CustomerRecord's <span class="function">getTotalSpent()</span> method using a Query object, though we're not going to get deeply into the details of Query objects at this point.</p>

  <p> </p>

  <p class="code">&lt;cffunction name="getTotalSpent" access="public" output="false" returntype="numeric"&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfset var InvoiceGateway = _getReactorFactory().createGateway("Invoice") /&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfset var Query = InvoiceGateway.createQuery() /&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfset var products = 0 /&gt;<br />
  <br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;!--- let's filter this to only this customer's invoices ---&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfset Query.getWhere().isEqual("Invoice", "customerId", getCustomerId()) /&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}--><br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;!--- let's join the invoice table to the invoiceproduct and product tables ---&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfset Query.join("Invoice", "InvoiceProduct", "InvoiceProduct").join("InvoiceProduct", "Product", "Product") /&gt;<br />
  <br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;!--- let's only return the price field ---&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfset Query.returnObjectField("Product", "price") /&gt;<br />
  <br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;!--- let's run the query ---&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfset products = InvoiceGateway.getByQuery(Query) /&gt;<br />
  <br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;!--- now let's get a value list and add up the results ---&gt;<br />
  <!--kadov_tag{{<spaces>}}-->   <!--kadov_tag{{</spaces>}}-->&lt;cfreturn ArraySum(ListToArray(ValueList(products.price))) /&gt;<br />
  &lt;/cffunction&gt;</p>

  <p> </p>

  <p>You might be wondering why you would use this technique over simply writing the query. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->It seems, perhaps, a little less efficient than actually running the query. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Also, you're doing the aggregate calculation to add up all of the prices in ColdFusion and not on the SQL server.</p>

  <p> </p>

  <p>For the most part you're right. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->However, there's one big advantage that makes this worth considering:</p>

  <p> </p>

  <p style="font-weight: bold; font-style: italic;">It's portable!</p>

  <p style="font-weight: bold; font-style: italic;"> </p>

  <p style="font-weight: normal; font-style: normal;">Let’s say that your application needs to support both MySQL and MSSQL (and, maybe another few DBMS). <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->The Object Oriented query will automatically work in both systems without modification. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->However, if you were to actually write a query you might need to rewrite the query to make it work on all platforms. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p style="font-weight: normal; font-style: normal;"> </p>

  <p style="font-weight: normal; font-style: normal;">Because of this advantage, it's suggested that OO queries not be placed in the DBMS specific customizable objects. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Instead, they should be placed in the customizable objects. (CustomerRecord.cfc instead of CustomerRecordmssql.cfc).</p>

  <p style="font-weight: normal; font-style: normal;"> </p>

  <p style="font-weight: normal; font-style: normal;">Do you want to have to tweak the query we wrote earlier to run on each DBMS? <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Maybe… Maybe not… <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->It depends on your application.</p>

  <p style="font-weight: normal; font-style: normal;"> </p>

  <p style="font-weight: normal; font-style: normal;">But, at the same time, if you could simply write the method one time in the database agnostic file and know that it would work, you might choose to save the time. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p style="font-weight: normal; font-style: normal;"> </p>

  <p style="font-weight: normal; font-style: normal;">There's a lot of power behind Query objects. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->I suggest reading over the Object Oriented Queries section.</p>
</body>
</html>
