<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>
  <title>The Reactor Generated Files</title><!--(Meta)==========================================================-->
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com" />
  <meta name="generator-major-version" content="0.1" />
  <meta name="generator-minor-version" content="1" />
  <meta name="filetype" content="kadov" />
  <meta name="filetype-version" content="1" />
  <meta name="page-count" content="1" />
  <meta name="layout-height" content="1086" />
  <meta name="layout-width" content="1153" /><!--(Links)=========================================================-->
  <link rel="StyleSheet" href="default.css" />
</head><!--(Body)==========================================================-->

<body>
  <h1>The Reactor Generated Files</h1>

  <p>Now that we've generated a gateway object, let's take a look at our file system and see what happened.</p>

  <p> </p>

  <p>Open your data directory. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->What once was empty now has two folders: Gateway and Metadata. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->These two folders correspond to the types of objects Reactor had to generate to create your UserGateway object.</p>

  <p> </p>

  <p>Underneath both of these folders are a collection of CFCs. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Underneath the /data/Gateway folder there are two files, UserGateway.cfc and UserGatewayDBMS.cfc, where DBMS is the abbreviation of the database system you're using. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Because I'm working with MSSQL mine is named UserGatewaymssql.cfc. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->If you're using MySQL 5 or later it would be named UserGatewaymysql.cfc.</p>

  <p> </p>

  <p>If you look at UserGatewaymssql.cfc you will see:</p>

  <p> </p>

  <p class="code">&lt;cfcomponent hint="I am the mssql custom Gateway object for the User object. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->I am generated, but not overwritten if I exist. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->You are safe to edit me."<br />
  <!--kadov_tag{{<spaces>}}-->    <!--kadov_tag{{</spaces>}}-->extends="UserGateway" &gt;<br />
  <!--kadov_tag{{<spaces>}}-->    <!--kadov_tag{{</spaces>}}-->&lt;!--- Place custom code here, it will not be overwritten ---&gt;<br />
  &lt;/cfcomponent&gt;</p>

  <p> </p>

  <p>This file is created so that you can add Database-Specific code to your application. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->For example, if you are creating an application that will be distributed to run on either MySQL or MSSQL, you would end up having two versions of the database-specific file. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->If you have a requirement for database-specific code it would go into the database-specific file.</p>

  <p> </p>

  <p>The database-specific file extends a database agnostic component, UserGateway.</p>

  <p> </p>

  <p>If you open UserGateway.cfc you will see the following code:</p>

  <p> </p>

  <p class="code">&lt;cfcomponent hint="I am the database agnostic custom Gateway object for the User object. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->I am generated, but not overwritten if I exist. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->You are safe to edit me."<br />
  <!--kadov_tag{{<spaces>}}-->    <!--kadov_tag{{</spaces>}}-->extends="reactor.project.Scratch.Gateway.UserGateway" &gt;<br />
  <!--kadov_tag{{<spaces>}}-->    <!--kadov_tag{{</spaces>}}-->&lt;!--- Place custom code here, it will not be overwritten ---&gt;<br />
  &lt;/cfcomponent&gt;</p>

  <p> </p>

  <p>This file is created so that you can add Database-Agnostic code to your application. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Code in this CFC should always work, no matter what DBMS you're using.</p>

  <p> </p>

  <p>This file extends another component, "reactor.project.Scratch.Gateway.UserGateway". <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->This CFC is created by reactor and contains a range of functions for the specific type of object. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->This file should never be edited. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->In fact, it's generated outside of your data directory (and maybe even your application) because the files in the reactor.project folder are volatile and could be overwritten at any time. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->You're safe to look at the file, but don't edit it. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}--></p>

  <p> </p>

  <p class="note">Note that the "Scratch" in reactor.project.Scratch is your application name. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->If you change your application name your DBMS-agnostic files will have the old application name hard coded into them. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->They won't be able to find the CFCs for your new application name.</p>

  <p> </p>

  <p class="note">Note: Reactor generated code is not as nicely formatted as you might prefer. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->Steps were taken to make it as readable as possible while still making the core XSL files reasonably easy to read. All in all, this code is not intended for human consumption.</p>

  <p> </p>

  <p>Files in the reactor.Project folder extend core Reactor objects, such as AbstractGateway, based on their type which provide a set of core type-specific functions. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->And, lastly, all of these objects ultimately extend a core AbstractObject object which provides the basest Reactor generated object functionality.</p>

  <p> </p>

  <p>You don't need to remember this. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->There will not be a test. <!--kadov_tag{{<spaces>}}--> <!--kadov_tag{{</spaces>}}-->I just think it's useful to understand what's going on under the covers.</p>

  <p>To learn what methods Reactor generated objects have, I suggest either dumping the objects using the cfdump tag or browsing directly to the component to see the ColdFusion generated documentation.</p>

  <p> </p>

  <p>All other generated objects follow the same pattern as the UserGateway.</p>
</body>
</html>
