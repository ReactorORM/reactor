<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<!-- saved from url=(0026)http://www.macromedia.com/ -->
<html>

<head>
<title>reactor.config.config</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="default_ns.css"><script type="text/javascript" language="JavaScript" title="WebHelpSplitCss">
<!--
if (navigator.appName !="Netscape")
{   document.write("<link rel='stylesheet' href='default.css'>");}
//-->
</script>
<style type="text/css">
<!--
table.whs1 { x-cell-content-align:top; width:100%; border-spacing:0px; }
col.whs2 { width:25%; }
tr.whs3 { x-cell-content-align:top; }
th.whs4 { width:25%; border-left-width:1px; border-left-color:#000000; border-left-style:Solid; border-top-style:Solid; border-top-color:#000000; border-top-width:1px; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
th.whs5 { width:25%; border-top-style:Solid; border-top-color:#000000; border-top-width:1px; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
td.whs6 { width:25%; border-left-width:1px; border-left-color:#000000; border-left-style:Solid; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
td.whs7 { width:25%; border-right-width:1px; border-right-color:#000000; border-right-style:Solid; border-bottom-style:Solid; border-bottom-color:#000000; border-bottom-width:1px; padding-right:10px; padding-left:10px; }
ul.whs8 { list-style:disc; }
table.whs9 { x-cell-content-align:top; width:100%; border-spacing:0px; }
-->
</style><script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
-->
</style><script type="text/javascript" language="javascript1.2" src="whtopic.js"></script>
<script type="text/javascript" language="javascript1.2" src="whutils.js"></script>
<script type="text/javascript" language="javascript" src="whver.js"></script>
<script  type="text/javascript" language="javascript1.2">
    <!--
    var linkedScrollbarStyle = "<link rel='stylesheet' href='wf_topics.css'>";
    if( (!isTopicOnly()) &&(parent.gbFHPureHtml == null) )
    {
        document.write(linkedScrollbarStyle);
    }
    //-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.addTocInfo)
{
addTocInfo("The Reactor API\nreactor.config\nreactor.config.config");

  addShowButton();
}
if (window.setRelStartPage)
{
setRelStartPage("Reactor_Documentation.htm");

	sendTopicLoaded();
	autoSync(1);
	sendSyncInfo();
	sendAveInfo();
	sendBgColorInfo();
}
//-->
</script>
<h6>reactor.config</h6>

<h1>Class config</h1>

The config object is used by Reactor to encapsulate configuration settings. 
 &nbsp;It is either 
 created automatically by Reactor when the <a href="reactor.ReactorFactory.htm">ReactorFactory</a> 
 is instantiated or it is manually created and passed into the <a href="reactor.ReactorFactory.htm">ReactorFactory</a> 
 or this configuration can be managed by an IOC container such as ColdSpring. 
 

<h2>Methods</h2>

<h3>init()</h3>

<h4>Description</h4>

<p>The <span class=function>init()</span> method is the pseudo-constructor 
 for the config component. &nbsp;This 
 method configures and returns the config component.</p>

<h4>Syntax</h4>

<p>reactor.config.config = init(pathToConfigXml)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs1">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>pathToConfigXml</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>This is a relative or absolute path to a reactor XML configuration file.</td></tr>
</table>

<p>&nbsp;</p>

<h3>getObjectConfig()</h3>

<h4>Description</h4>

<p>The <span class=function>getObjectConfig()</span> method returns the 
 XML configuration information for a specific database object. &nbsp;If 
 the object is not configured a default configuration is returned.</p>

<p>&nbsp;</p>

<p>This method is only intended for use by Reactor. &nbsp;This 
 method may change or be removed in future versions of Reactor.</p>

<h4>Syntax</h4>

<p>string = getObjectConfig(alias)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs1">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>alias</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>The alias of the object to get the configuration XML for.</td></tr>
</table>

<h3>setDsn()</h3>

<h4>Description</h4>

<p>The <span class=function>setDsn()</span> method sets the ColdFusion 
 datasource that Reactor will use to access data.</p>

<h4>Syntax</h4>

<p>setDsn(alias)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs1">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>alias</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>The datasource to use.</td></tr>
</table>

<h3>getDsn()</h3>

<h4>Description</h4>

<p>The <span class=function>getDsn()</span> method gets the ColdFusion 
 datasource that Reactor will use to access data.</p>

<h4>Syntax</h4>

<p>string = getDsn()</p>

<h3>setType()</h3>

<h4>Description</h4>

<p>The <span class=function>setType()</span> method sets the type of database 
 that Reactor is working with. &nbsp;</p>

<h4>Syntax</h4>

<p>setType(type)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs1">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>type</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>The type of database being used. &nbsp;Options 
 are:</p>
<ul type="disc" class="whs8">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>mssql</B></span> 
 - Microsoft SQL Server 2000 and 2005.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>mysql</B></span> 
 - MySQL 5</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>mysql4</B></span> 
 - MySQL 4</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>postgresql</B></span> 
 - PostgreSQL 8</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>db2</B></span> - 
 IBM DB2</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>oracle</B></span> 
 - Oracle 9i and 10g</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>oraclerdb</B></span> 
 - Oracle RDB (this is not officially supported)</p></li>
</ul></td></tr>
</table>

<h3>getType()</h3>

<h4>Description</h4>

<p>The <span class=function>getType()</span> method gets the type of database 
 that Reactor is working with.</p>

<h4>Syntax</h4>

<p>string = getType()</p>

<h3>setMapping()</h3>

<h4>Description</h4>

<p>The <span class=function>setMapping()</span> method sets the location 
 where Reactor-generated files will be written. &nbsp;Although 
 this method is &quot;setMapping&quot; this does not need to be a ColdFusion 
 mapping, it can also be a relative path from the application's webroot.</p>

<p>&nbsp;</p>

<p>For example, if my application's webroot is in &quot;c:\inetpub\myApp&quot; 
 then I could specify &quot;/data&quot; for &quot;c:\inetpub\myApp\data&quot;. 
 &nbsp;Alternativly 
 &quot;/data&quot; could be a mapping to another directory outside of the 
 webroot.</p>

<h4>Syntax</h4>

<p>setMapping(mapping)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs9">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>mapping</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>The relative path or mapping to the directory where reactor will write 
 generated files.</td></tr>
</table>

<h3>getMapping()</h3>

<h4>Description</h4>

<p>The <span class=function>getMapping()</span> method gets the location 
 where Reactor writes generated files.</p>

<h4>Syntax</h4>

<p>string = getMapping()</p>

<h2>getMappingObjectStem()</h2>

<h4>Description</h4>

<p>The <span class=function>getMappingObjectStem()</span> method translates 
 the mapping named (set by <span class=function>setMapping()</span>) to 
 the root portion of a package name.</p>

<p>&nbsp;</p>

<p>This method is only intended for use by Reactor. &nbsp;This 
 method may change or be removed in future versions of Reactor.</p>

<h4>Syntax</h4>

<p>string = getMappingObjectStem()</p>

<h3>setMode()</h3>

<h4>Description</h4>

<p>The <span class=function>setMode()</span> method sets the circumstances 
 under which Reactor will generate files.</p>

<h4>Syntax</h4>

<p>setMode(mode)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs9">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>mode</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>The mode reactor is in. &nbsp;Options 
 are:</p>
<ul type="disc" class="whs8">
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>always</B></span> 
 - Reactor always recreates project files. This is the slowest setting 
 and is used primarily for development of the Reactor framework.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>development</B></span> 
 - Reactor only regenerates project files when the database object or the 
 Reactor XML configuration has changed. This is a faster setting than always 
 and is used primarily for development of applications which use Reactor.</p></li>
	
	<li class=kadov-p><p><span style="font-weight: bold;"><B>production</B></span> 
 - Reactor never regenerates project files when they already exist. This 
 is a fastest setting and is used in production applications.</p></li>
</ul>
<p>&nbsp;</p>
<p class=note>Note: Custom files are never regenerated when they already 
 exist.</td></tr>
</table>

<h3>getMode()</h3>

<h4>Description</h4>

<p>The <span class=function>getMode()</span> method gets the mode Reactor 
 is in.</p>

<h4>Syntax</h4>

<p>string = getMode()</p>

<h3>setProject()</h3>

<h4>Description</h4>

<p>The <span class=function>setProject()</span> method sets the name of 
 the project Reactor is being used in. &nbsp;This 
 is akin to the application name used in the &lt;cfapplication&gt; tag. 
 &nbsp;For a given 
 application this name should never be changed once it's set. &nbsp;Reactor 
 hard codes this name into the custom objects to specify the location of 
 project files. &nbsp;If 
 this changes all of the custom objects need to be manually updated or 
 deleted and regenerated.</p>

<h4>Syntax</h4>

<p>setProject(project)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs9">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>project</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>The name of the project.</td></tr>
</table>

<h3>getProject()</h3>

<h4>Description</h4>

<p>The <span class=function>getProject()</span> method gets the project 
 name.</p>

<h4>Syntax</h4>

<p>string = getProject()</p>

<h3>setUsername()</h3>

<h4>Description</h4>

<p>The <span class=function>setUsername()</span> method sets the username 
 that Reactor uses when querying the database. &nbsp;This 
 setting is not required if your datasource does not require it.</p>

<h4>Syntax</h4>

<p>setUsername(username)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs9">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>username</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>The DSN username to use.</td></tr>
</table>

<h3>getUsername()</h3>

<h4>Description</h4>

<p>The <span class=function>getUsername()</span> method gets the DSN username.</p>

<h4>Syntax</h4>

<p>string = getUsername()</p>

<h3>setPassword()</h3>

<h4>Description</h4>

<p>The <span class=function>setPassword()</span> method sets the password 
 that Reactor uses when querying the database. &nbsp;This 
 setting is not required if your datasource does not require it.</p>

<h4>Syntax</h4>

<p>setPassword(password)</p>

<p>&nbsp;</p>

<table x-use-null-cells cellspacing="0" width="100%" class="whs9">
<col class="whs2">
<col class="whs2">
<col class="whs2">
<col class="whs2">

<tr valign="top" class="whs3">
<th scope="col" width="25%" class="whs4">
<p>Argument</th>
<th scope="col" width="25%" class="whs5">
<p>Required</th>
<th scope="col" width="25%" class="whs5">
<p>Type</th>
<th scope="col" width="25%" class="whs5">
<p>Description</th></tr>

<tr valign="top" class="whs3">
<td width="25%" class="whs6">
<p>password</td>
<td width="25%" class="whs7">
<p>Yes</td>
<td width="25%" class="whs7">
<p>String</td>
<td width="25%" class="whs7">
<p>The DSN password to use.</td></tr>
</table>

<h3>getPassword()</h3>

<h4>Description</h4>

<p>The <span class=function>getPassword()</span> method gets the DSN password.</p>

<h4>Syntax</h4>

<p>string = getPassword()</p>

<p>&nbsp;</p>

</body>
</html>
