<!-- saved from url=(0026)http://www.macromedia.com/ -->
<html>
<head>
<title>Glossary words list</title>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<meta name="generator" content="RoboHelp by eHelp Corporation   www.ehelp.com">
<meta name="description" content="FlashHelp 1.5">
<base target="bsscright">
<style>
<!--
body {margin-left:1pt; margin-top:1pt; margin-right:1pt;font-family:Arial; font-size:9pt;}

A:link {font-family:Arial; font-size:9pt; color:#000000;  font-style:normal;  text-decoration:none; }
A:visited {font-family:Arial; font-size:9pt; color:#000000; font-style:normal;  text-decoration:none; }
A:active {background-color:#cccccc;}
A:hover {font-family:Arial; font-size:9pt; color:#007f00; font-style:normal;  text-decoration:underline; }

.tabs {background-color:#c0c0c0;}
.glsheader {margin-left:10pt; margin-top:0pt;}
.glsbody {margin-left:10pt; margin-top:0pt;}
.inactive {color:#666666;}



p {font-family:Arial; } p {font-size:8pt; } p {font-style:Normal; } p {text-decoration:none; } 
A:link {font-family:Arial; } A:link {font-size:8pt; } A:link {font-style:Normal; } A:link {text-decoration:none; } 
A:visited {font-family:Arial; }A:visited {font-size:8pt; } A:visited {font-style:Normal; } A:visited {text-decoration:none; } 

A:hover {font-family:Arial; } A:hover {font-size:8pt; } A:hover {font-style:Normal; } A:hover {text-decoration:underline; } 

-->
</style>
</head>
<body marginheight="0"  marginwidth="0">
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_A"></a><nobr><b>Active Record</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">The Active Record design pattern is new to many developers but has become familiar due to well recognized and respected implementations including the Ruby on Rails framework.&nbsp; There are many flavors of this design pattern.&nbsp; Most implementations are of one object which represents one row in a database.&nbsp; The object has assessors and mutators (methods for getting and setting values) as well as methods for reading a record, saving it, and deleting it.&nbsp; There are also frequently methods for accessing related objects in the database.<p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>API</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>assessor</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_B"></a><nobr><b>Bean</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">A Bean is traditionally a component which encapsulates its instance data in private properties.&nbsp; It then provided “getters and setters” (assessors and mutators, technically) which are used to read and write those values.<p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_C"></a><nobr><b>CFC</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>ColdFusion</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>CRUD</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">CRUD stands for Create, Read, Update and Delete.&nbsp; These are the four actions provided by Data Access Objects.<p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_D"></a><nobr><b>DAO</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">See Data Access Object<p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>Data Access Object</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">Data Access Objects (commonly called DAOs) are objects which provide methods for creating, reading, updating and deleting a single record in a database.&nbsp; These are generically known as “CRUD” methods.<p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>DBMS</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>design pattern</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>Dirty</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">Dirty<p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>DSN</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_F"></a><nobr><b>framework</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_G"></a><nobr><b>Gateway</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">See Table Data Gateway<p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_M"></a><nobr><b>Metadata Object</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>mutator</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_O"></a><nobr><b>Object Oriented Programming</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>ORM</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_P"></a><nobr><b>Procedural Programming</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_R"></a><nobr><b>Reactor for ColdFusion</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>Record</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>record set</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>Ruby On Rails</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody" style="margin-bottom:1pt;"><a name="bm_T"></a><nobr><b>Table Data Gateway</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">See GatewayTable Data Gateway objects (commonly known as Gateway Objects) are used to interact with multiple rows in a database.&nbsp; Most methods in these objects return record sets (queries) and perform select statements.<p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>TO</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;">See Transfer Object<p>
<p class="glsbody" style="margin-bottom:1pt;"><nobr><b>Transfer Object</b></nobr></p>
<p class="glsbody" style="margin-top:1pt;"><p>
<p class="glsbody"><br><br></p>

</body>

</html>

