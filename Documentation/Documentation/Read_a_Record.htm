<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Read a Record</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2990>
<meta name=layout-width content=1153>


<!--(Links)=========================================================-->

<link rel=StyleSheet href=default.css>



</head>

<!--(Body)==========================================================-->


<body>

<h1>Read a Record</h1>

<p>Before you can read a Record you need to create a Record object. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->We'll 
 be using the same ReactorFactory object we created for the gateway example:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- create the reactorFactory ---&gt;<br>
&lt;cfset reactor = CreateObject(&quot;Component&quot;, &quot;reactor.reactorFactory&quot;).init(expandPath(&quot;reactor.xml&quot;)) 
 /&gt;</p>

<p>&nbsp;</p>

<p>Creating an instance of a record object is as simple as this:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- create a userRecord ---&gt;<br>
&lt;cfset UserRecord = reactor.createRecord(&quot;User&quot;) /&gt;</p>

<p>&nbsp;</p>

<p>The syntax for this is essentially identical to creating a gateway and 
 all other Reactor generated objects.</p>

<p>&nbsp;</p>

<p>Let's take a moment and look at what we've got now. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 you dump this object you'll see this result: (I've collapsed portions 
 to make it smaller for this document).</p>

<p><img src="image5.gif"
		style="border: none;
				width: 335px;
				height: 1326px;"
		width=335
		height=1326
		border=0></p>

<p>By looking at the dump you can see that there 38 methods. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Some 
 of these we've discussed and most we haven't. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->These 
 are all explained in the Record Object section.</p>

<p>&nbsp;</p>

<p>There are, however, the 12 getter and setter methods, one for each field 
 in the table. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->We 
 also have the <span class=function>load()</span>, <span class=function>save()</span> 
 and <span class=function>delete()</span> methods. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->That 
 leaves 23 other methods. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Ignore 
 them for now.</p>

<p>&nbsp;</p>

<p>For fun, let's call the 6 getters methods using this code:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- let's dump the default values in the UserRecord 
 ---&gt;<br>
&lt;cfoutput&gt;<br>
getUserId(): &quot;#UserRecord.getUserId()#&quot;&lt;br /&gt;<br>
getUsername(): &quot;#UserRecord.getUsername()#&quot;&lt;br /&gt;<br>
getPassword(): &quot;#UserRecord.getPassword()#&quot;&lt;br /&gt;<br>
getFirstName(): &quot;#UserRecord.getFirstName()#&quot;&lt;br /&gt;<br>
getLastName(): &quot;#UserRecord.getLastName()#&quot;&lt;br /&gt;<br>
getDateCreated(): &quot;#UserRecord.getDateCreated()#&quot;&lt;br /&gt;<br>
&lt;/cfoutput&gt;</p>

<p>&nbsp;</p>

<p>This results in the following output:</p>

<p><img src="image6.gif"
		style="border: none;
				width: 309px;
				height: 132px;"
		width=309
		height=132
		border=0></p>

<p>Not much of interest here. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->One 
 thing I would like to point out is that <span class=function>getDateCreated()</span> 
 returned a date value. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Depending 
 on if your DBMS supports non-static default values, you may or may not 
 see an empty string here. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->For 
 at least MSSQL, a default expression which calls the getDate() method 
 will be translated into <span class=function>now()</span> in ColdFusion. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->I'll show 
 a related trick for other DBMS in a bit.</p>

<p>&nbsp;</p>

<p>Carrying on now…</p>

<p>&nbsp;</p>

<p>Before we can load a record we need to tell the Record which row it 
 represents. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->According 
 to our schema, the User table has one primary key, userId. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->By 
 default, Reactor relies on primary key values to identify specific rows 
 to read (and all objects support multiple primary and foreign keys). <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->You 
 can also pass name/value pairs into the <span class=function>load()</span> 
 method to load arbitrary rows.</p>

<p>&nbsp;</p>

<p>In my database I have one row. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 row has a UserId value of 1. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->So, 
 I'll set the userId value in my UserRecord to 1:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- set the record to load ---&gt;<br>
&lt;cfset UserRecord.setUserId(1) /&gt;</p>

<p>&nbsp;</p>

<p class=note>Note: You wouldn't typically hard-code the value &quot;1&quot; 
 into your application. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 is just an example.</p>

<p>&nbsp;</p>

<p>Now that the record &quot;knows&quot; its primary key you can load the 
 data. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Be 
 warned! <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 might not be for the faint of heart:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- load the record ---&gt;<br>
&lt;cfset UserRecord.load() /&gt;</p>

<p>&nbsp;</p>

<p>Well, that wasn't that bad after all, was it? <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->But 
 what happened? <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Let's 
 call those six methods again and see…</p>

<p><img src="image10.gif"
		style="border: none;
				width: 302px;
				height: 132px;"
		width=302
		height=132
		border=0></p>

<p>Isn't that cool?! <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->Calling 
 the <span class=function>load()</span> method automatically populated 
 the object with the correct data from the database! <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>&nbsp;</p>

<p>This is a short-hand example of the same thing:</p>

<p>&nbsp;</p>

<p class=code>&lt;!--- load the record ---&gt;<br>
&lt;cfset UserRecord = Reactor.createRecord(&quot;User&quot;).load(userId=1) 
 /&gt;</p>

<p>&nbsp;</p>

<p>So, what happens when you change the data and <a href="Save_Changes_to_a_Record.htm">Save 
 Changes to a Record</a>?</p>

</body>

</html>
